{
    "project": {
        "name": "p5",
        "description": "",
        "version": "0.4.4",
        "url": ""
    },
    "files": {
        "src/color/creating_reading.js": {
            "name": "src/color/creating_reading.js",
            "modules": {
                "Creating & Reading": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/color/setting.js": {
            "name": "src/color/setting.js",
            "modules": {
                "Setting": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/core/constants.js": {
            "name": "src/core/constants.js",
            "modules": {
                "Constants": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/core/core.js": {
            "name": "src/core/core.js",
            "modules": {
                "Structure": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/data/array_functions.js": {
            "name": "src/data/array_functions.js",
            "modules": {
                "Array Functions": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/data/conversion.js": {
            "name": "src/data/conversion.js",
            "modules": {
                "Conversion": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/data/string_functions.js": {
            "name": "src/data/string_functions.js",
            "modules": {
                "String Functions": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/environment/environment.js": {
            "name": "src/environment/environment.js",
            "modules": {
                "Environment": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/image/filters.js": {
            "name": "src/image/filters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/image/image.js": {
            "name": "src/image/image.js",
            "modules": {
                "Image": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/image/loading_displaying.js": {
            "name": "src/image/loading_displaying.js",
            "modules": {
                "Loading & Displaying": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/image/pixels.js": {
            "name": "src/image/pixels.js",
            "modules": {
                "Pixels": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/acceleration.js": {
            "name": "src/input/acceleration.js",
            "modules": {
                "Acceleration": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/files.js": {
            "name": "src/input/files.js",
            "modules": {
                "Files": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/keyboard.js": {
            "name": "src/input/keyboard.js",
            "modules": {
                "Keyboard": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/mouse.js": {
            "name": "src/input/mouse.js",
            "modules": {
                "Mouse": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/time_date.js": {
            "name": "src/input/time_date.js",
            "modules": {
                "Time & Date": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/input/touch.js": {
            "name": "src/input/touch.js",
            "modules": {
                "Touch": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/math/calculation.js": {
            "name": "src/math/calculation.js",
            "modules": {
                "Calculation": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/math/math.js": {
            "name": "src/math/math.js",
            "modules": {
                "Math": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/math/noise.js": {
            "name": "src/math/noise.js",
            "modules": {
                "Noise": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/math/random.js": {
            "name": "src/math/random.js",
            "modules": {
                "Random": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/math/trigonometry.js": {
            "name": "src/math/trigonometry.js",
            "modules": {
                "Trigonometry": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/objects/p5.Color.js": {
            "name": "src/objects/p5.Color.js",
            "modules": {},
            "classes": {
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/objects/p5.Element.js": {
            "name": "src/objects/p5.Element.js",
            "modules": {
                "DOM": 1
            },
            "classes": {
                "p5.Element": 1
            },
            "fors": {
                "p5.Element": 1
            },
            "namespaces": {}
        },
        "src/objects/p5.File.js": {
            "name": "src/objects/p5.File.js",
            "modules": {
                "Data": 1
            },
            "classes": {
                "p5.File": 1
            },
            "fors": {
                "p5.File": 1
            },
            "namespaces": {}
        },
        "src/objects/p5.Graphics.js": {
            "name": "src/objects/p5.Graphics.js",
            "modules": {
                "Rendering": 1
            },
            "classes": {
                "p5.Graphics": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/objects/p5.Image.js": {
            "name": "src/objects/p5.Image.js",
            "modules": {},
            "classes": {
                "p5.Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/p5.Table.js": {
            "name": "src/objects/p5.Table.js",
            "modules": {
                "Table": 1
            },
            "classes": {
                "p5.Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/p5.TableRow.js": {
            "name": "src/objects/p5.TableRow.js",
            "modules": {},
            "classes": {
                "p5.TableRow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/objects/p5.Vector.js": {
            "name": "src/objects/p5.Vector.js",
            "modules": {},
            "classes": {
                "p5.Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/output/files.js": {
            "name": "src/output/files.js",
            "modules": {
                "Output": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/output/image.js": {
            "name": "src/output/image.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/output/text_area.js": {
            "name": "src/output/text_area.js",
            "modules": {
                "Text Area": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/rendering/rendering.js": {
            "name": "src/rendering/rendering.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/shape/2d_primitives.js": {
            "name": "src/shape/2d_primitives.js",
            "modules": {
                "2D Primitives": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/shape/attributes.js": {
            "name": "src/shape/attributes.js",
            "modules": {
                "Attributes": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/shape/curves.js": {
            "name": "src/shape/curves.js",
            "modules": {
                "Curves": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/shape/vertex.js": {
            "name": "src/shape/vertex.js",
            "modules": {
                "Vertex": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/structure/structure.js": {
            "name": "src/structure/structure.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/transform/transform.js": {
            "name": "src/transform/transform.js",
            "modules": {
                "Transform": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/typography/attributes.js": {
            "name": "src/typography/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/typography/loading_displaying.js": {
            "name": "src/typography/loading_displaying.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/utils/color_utils.js": {
            "name": "src/utils/color_utils.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "src/var/canvas.js": {
            "name": "src/var/canvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app.js": {
            "name": "src/app.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/addons/p5.dom.js": {
            "name": "lib/addons/p5.dom.js",
            "modules": {
                "p5.dom": 1
            },
            "classes": {
                "p5.MediaElement": 1
            },
            "fors": {
                "p5.dom": 1,
                "p5.Element": 1
            },
            "namespaces": {}
        },
        "lib/addons/p5.sound.js": {
            "name": "lib/addons/p5.sound.js",
            "modules": {
                "p5.sound": 1
            },
            "classes": {
                "p5.SoundFile": 1,
                "p5.Amplitude": 1,
                "p5.FFT": 1,
                "p5.Signal": 1,
                "p5.Oscillator": 1,
                "p5.Env": 1,
                "p5.Pulse": 1,
                "p5.Noise": 1,
                "p5.AudioIn": 1,
                "p5.Filter": 1,
                "p5.Delay": 1,
                "p5.Reverb": 1,
                "p5.Convolver": 1,
                "p5.Phrase": 1,
                "p5.Part": 1,
                "p5.Score": 1,
                "p5.SoundRecorder": 1
            },
            "fors": {
                "p5.sound": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "Color": {
            "name": "Color",
            "submodules": {
                "Creating & Reading": 1,
                "Setting": 1
            },
            "classes": {
                "p5": 1,
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "src/objects/p5.Color.js",
            "line": 12
        },
        "Creating & Reading": {
            "name": "Creating & Reading",
            "submodules": {},
            "classes": {
                "p5": 1,
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "src/objects/p5.Color.js",
            "line": 12,
            "requires": [
                "core"
            ]
        },
        "Setting": {
            "name": "Setting",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "src/color/setting.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Constants": {
            "name": "Constants",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Constants",
            "file": "src/core/constants.js",
            "line": 1
        },
        "Structure": {
            "name": "Structure",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Structure",
            "file": "src/core/core.js",
            "line": 1,
            "requires": [
                "constants"
            ]
        },
        "Data": {
            "name": "Data",
            "submodules": {
                "Array Functions": 1,
                "Conversion": 1,
                "String Functions": 1,
                "Table": 1,
                "Output": 1
            },
            "classes": {
                "p5.File": 1,
                "p5.Table": 1,
                "p5.TableRow": 1
            },
            "fors": {
                "p5": 1,
                "p5.File": 1
            },
            "namespaces": {},
            "module": "Data",
            "file": "src/objects/p5.TableRow.js",
            "line": 12,
            "description": "Base class for a file\nUsing this for createFileInput"
        },
        "Array Functions": {
            "name": "Array Functions",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "src/data/array_functions.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Conversion": {
            "name": "Conversion",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "src/data/conversion.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "String Functions": {
            "name": "String Functions",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "src/data/string_functions.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Environment": {
            "name": "Environment",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Environment",
            "file": "src/environment/environment.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Image": {
            "name": "Image",
            "submodules": {
                "Pixels": 1
            },
            "classes": {
                "p5.Image": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Image",
            "file": "src/objects/p5.Image.js",
            "line": 24,
            "requires": [
                "core"
            ],
            "description": "Creates a new p5.Image. A p5.Image is a canvas backed representation of an\nimage. p5 can display .gif, .jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used, it must be loaded with the\nloadImage() function. The p5.Image class contains fields for the width and\nheight of the image, as well as an array called pixels[] that contains the\nvalues for every pixel in the image. The methods described below allow\neasy access to the image's pixels and alpha channel and simplify the\nprocess of compositing.\n\nBefore using the pixels[] array, be sure to use the loadPixels() method on\nthe image to make sure that the pixel data is properly loaded."
        },
        "Loading & Displaying": {
            "name": "Loading & Displaying",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "src/image/loading_displaying.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Pixels": {
            "name": "Pixels",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Image",
            "namespace": "",
            "file": "src/image/pixels.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Input": {
            "name": "Input",
            "submodules": {
                "Acceleration": 1,
                "Files": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "Time & Date": 1,
                "Touch": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "Acceleration": {
            "name": "Acceleration",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/acceleration.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Files": {
            "name": "Files",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/files.js",
            "line": 1,
            "requires": [
                "core",
                "reqwest"
            ]
        },
        "Keyboard": {
            "name": "Keyboard",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/keyboard.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Mouse": {
            "name": "Mouse",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/mouse.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Time & Date": {
            "name": "Time & Date",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/time_date.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Touch": {
            "name": "Touch",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Input",
            "namespace": "",
            "file": "src/input/touch.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Math": {
            "name": "Math",
            "submodules": {
                "Calculation": 1,
                "Noise": 1,
                "Random": 1,
                "Trigonometry": 1
            },
            "classes": {
                "p5.Vector": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Math",
            "file": "src/objects/p5.Vector.js",
            "line": 14,
            "requires": [
                "core"
            ],
            "description": "A class to describe a two or three dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (x,y for 2D, and x,y,z for 3D). The magnitude\nand direction can be accessed via the methods mag() and heading(). In many\nof the p5.js examples, you will see p5.Vector used to describe a position,\nvelocity, or acceleration. For example, if you consider a rectangle moving\nacross the screen, at any given instant it has a position (a vector that\npoints from the origin to its location), a velocity (the rate at which the\nobject's position changes per time unit, expressed as a vector), and\nacceleration (the rate at which the object's velocity changes per time\nunit, expressed as a vector). Since vectors represent groupings of values,\nwe cannot simply use traditional addition/multiplication/etc. Instead,\nwe'll need to do some \"vector\" math, which is made easy by the methods\ninside the p5.Vector class."
        },
        "Calculation": {
            "name": "Calculation",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "src/math/calculation.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Noise": {
            "name": "Noise",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "src/math/noise.js",
            "line": 14,
            "requires": [
                "core"
            ]
        },
        "Random": {
            "name": "Random",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "src/math/random.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Trigonometry": {
            "name": "Trigonometry",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "src/math/trigonometry.js",
            "line": 1,
            "requires": [
                "core",
                "polargeometry",
                "constants"
            ]
        },
        "DOM": {
            "name": "DOM",
            "submodules": {},
            "classes": {
                "p5.Element": 1
            },
            "fors": {
                "p5.Element": 1
            },
            "namespaces": {},
            "module": "DOM",
            "file": "src/objects/p5.Element.js",
            "line": 10,
            "description": "Base class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. Methods in blue are\nincluded in the core functionality, methods in brown are added\nwith the <a href=\"http://p5js.org/libraries/\">p5.dom library</a>. \nIt is not called directly, but p5.Element\nobjects are created by calling createCanvas, createGraphics,\nor in the p5.dom library, createDiv, createImg, createInput, etc."
        },
        "Rendering": {
            "name": "Rendering",
            "submodules": {},
            "classes": {
                "p5.Graphics": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Rendering",
            "file": "src/objects/p5.Graphics.js",
            "line": 11,
            "description": "Main graphics and rendering context, as well as the base API\nimplementation for p5.js \"core\". Use this class if you need to draw into\nan off-screen graphics buffer. A p5.Graphics object can be constructed\nwith the <code>createGraphics()</code> function. The fields and methods\nfor this class are extensive, but mirror the normal drawing API for p5."
        },
        "Table": {
            "name": "Table",
            "submodules": {},
            "classes": {
                "p5.Table": 1,
                "p5.TableRow": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "src/objects/p5.TableRow.js",
            "line": 12,
            "requires": [
                "core"
            ],
            "description": "Table objects store data with multiple rows and columns, much\nlike in a traditional spreadsheet. Tables can be generated from\nscratch, dynamically, or using data from an existing file."
        },
        "Output": {
            "name": "Output",
            "submodules": {
                "Text Area": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "src/output/files.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Text Area": {
            "name": "Text Area",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Output",
            "namespace": "",
            "file": "src/output/text_area.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Shape": {
            "name": "Shape",
            "submodules": {
                "2D Primitives": 1,
                "Curves": 1,
                "Vertex": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "2D Primitives": {
            "name": "2D Primitives",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "src/shape/2d_primitives.js",
            "line": 1,
            "requires": [
                "core",
                "canvas",
                "constants"
            ]
        },
        "Attributes": {
            "name": "Attributes",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "src/shape/attributes.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Curves": {
            "name": "Curves",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "src/shape/curves.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Vertex": {
            "name": "Vertex",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "src/shape/vertex.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Transform": {
            "name": "Transform",
            "submodules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Transform",
            "file": "src/transform/transform.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Typography": {
            "name": "Typography",
            "submodules": {
                "Loading & Displaying": 1,
                "Attributes": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "p5.dom": {
            "name": "p5.dom",
            "submodules": {},
            "classes": {
                "p5.dom": 1,
                "p5.MediaElement": 1
            },
            "fors": {
                "p5.dom": 1,
                "p5.Element": 1
            },
            "namespaces": {},
            "module": "p5.dom",
            "file": "lib/addons/p5.dom.js",
            "line": 864,
            "description": "<p>The web is much more than just canvas and p5.dom makes it easy to interact\nwith other HTML5 objects, including text, hyperlink, image, input, video,\naudio, and webcam.</p>\n<p>There is a set of creation methods, DOM manipulation methods, and\nan extended p5.Element that supports a range of HTML elements. See the\n<a href=\"https://github.com/processing/p5.js/wiki/Beyond-the-canvas\">\nbeyond the canvas tutorial</a> for a full overview of how this addon works.\n\n<p>Methods and properties shown in black are part of the p5.js core, items in\nblue are part of the p5.dom library. You will need to include an extra file\nin order to access the blue functions. See the\n<a href=\"http://p5js.org/libraries/#using-a-library\">using a library</a>\nsection for information on how to include this library. p5.dom comes with\n<a href=\"http://p5js.org/download\">p5 complete</a> or you can download the single file\n<a href=\"https://raw.githubusercontent.com/lmccart/p5.js/master/lib/addons/p5.dom.js\">\nhere</a>.</p>\n<p>See <a href=\"https://github.com/processing/p5.js/wiki/Beyond-the-canvas\">tutorial: beyond the canvas]</a>\nfor more info on how to use this libary.</a>",
            "tag": "main",
            "itemtype": "main"
        },
        "p5.sound": {
            "name": "p5.sound",
            "submodules": {},
            "classes": {
                "p5.sound": 1,
                "p5.SoundFile": 1,
                "p5.Amplitude": 1,
                "p5.FFT": 1,
                "p5.Signal": 1,
                "p5.Oscillator": 1,
                "p5.Env": 1,
                "p5.Pulse": 1,
                "p5.Noise": 1,
                "p5.AudioIn": 1,
                "p5.Filter": 1,
                "p5.Delay": 1,
                "p5.Reverb": 1,
                "p5.Convolver": 1,
                "p5.Phrase": 1,
                "p5.Part": 1,
                "p5.Score": 1,
                "p5.SoundRecorder": 1
            },
            "fors": {
                "p5.sound": 1
            },
            "namespaces": {},
            "module": "p5.sound",
            "file": "lib/addons/p5.sound.js",
            "line": 5815,
            "description": "p5.sound extends p5 with <a href=\"http://caniuse.com/audio-api\"\ntarget=\"_blank\">Web Audio</a> functionality including audio input,\nplayback, analysis and synthesis.\n<br/><br/>\n<a href=\"#/p5.SoundFile\"><b>p5.SoundFile</b></a>: Load and play sound files.<br/>\n<a href=\"#/p5.Amplitude\"><b>p5.Amplitude</b></a>: Get the current volume of a sound.<br/>\n<a href=\"#/p5.AudioIn\"><b>p5.AudioIn</b></a>: Get sound from an input source, typically\n  a computer microphone.<br/>\n<a href=\"#/p5.FFT\"><b>p5.FFT</b></a>: Analyze the frequency of sound. Returns\n  results from the frequency spectrum or time domain (waveform).<br/>\n<a href=\"#/p5.Oscillator\"><b>p5.Oscillator</b></a>: Generate Sine,\n  Triangle, Square and Sawtooth waveforms. Base class of\n  <a href=\"#/p5.Noise\">p5.Noise</a> and <a href=\"#/p5.Pulse\">p5.Pulse</a>.\n  <br/>\n<a href=\"#/p5.Env\"><b>p5.Env</b></a>: An Envelope is a series\n  of fades over time. Often used to control an object's\n  output gain level as an \"ADSR Envelope\" (Attack, Decay,\n  Sustain, Release). Can also modulate other parameters.<br/>\n<a href=\"#/p5.Delay\"><b>p5.Delay</b></a>: A delay effect with\n  parameters for feedback, delayTime, and lowpass filter.<br/>\n<a href=\"#/p5.Filter\"><b>p5.Filter</b></a>: Filter the frequency range of a\n  sound.\n<br/>\n<a href=\"#/p5.Reverb\"><b>p5.Reverb</b></a>: Add reverb to a sound by specifying\n  duration and decay. <br/>\n<b><a href=\"#/p5.Convolver\">p5.Convolver</a>:</b> Extends\n<a href=\"#/p5.Reverb\">p5.Reverb</a> to simulate the sound of real\n  physical spaces through convolution.<br/>\n<b><a href=\"#/p5.SoundRecorder\">p5.SoundRecorder</a></b>: Record sound for playback \n  / save the .wav file.\n<b><a href=\"#/p5.Phrase\">p5.Phrase</a></b>, <b><a href=\"#/p5.Part\">p5.Part</a></b> and\n<b><a href=\"#/p5.Score\">p5.Score</a></b>: Compose musical sequences.\n<br/><br/>\np5.sound is on <a href=\"https://github.com/therewasaguy/p5.sound/\">GitHub</a>.\nDownload the latest version \n<a href=\"https://github.com/therewasaguy/p5.sound/blob/master/lib/p5.sound.js\">here</a>.",
            "tag": "main",
            "itemtype": "main"
        }
    },
    "classes": {
        "p5": {
            "name": "p5",
            "shortname": "p5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Color",
            "submodule": "Creating & Reading",
            "namespace": ""
        },
        "p5.Color": {
            "name": "p5.Color",
            "shortname": "p5.Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Color",
            "submodule": "Creating & Reading",
            "namespace": "",
            "file": "src/objects/p5.Color.js",
            "line": 12,
            "is_constructor": 1
        },
        "p5.Element": {
            "name": "p5.Element",
            "shortname": "p5.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "submodule": "DOM",
            "namespace": "",
            "file": "src/objects/p5.Element.js",
            "line": 10,
            "description": "Base class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. Methods in blue are\nincluded in the core functionality, methods in brown are added\nwith the <a href=\"http://p5js.org/libraries/\">p5.dom library</a>. \nIt is not called directly, but p5.Element\nobjects are created by calling createCanvas, createGraphics,\nor in the p5.dom library, createDiv, createImg, createInput, etc.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "p5.File": {
            "name": "p5.File",
            "shortname": "p5.File",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Data",
            "namespace": "",
            "file": "src/objects/p5.File.js",
            "line": 14,
            "description": "Base class for a file\nUsing this for createFileInput",
            "is_constructor": 1,
            "params": [
                {
                    "name": "file",
                    "description": "File that is wrapped",
                    "type": "File"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "p5.Graphics": {
            "name": "p5.Graphics",
            "shortname": "p5.Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": "",
            "file": "src/objects/p5.Graphics.js",
            "line": 11,
            "description": "Main graphics and rendering context, as well as the base API\nimplementation for p5.js \"core\". Use this class if you need to draw into\nan off-screen graphics buffer. A p5.Graphics object can be constructed\nwith the <code>createGraphics()</code> function. The fields and methods\nfor this class are extensive, but mirror the normal drawing API for p5.",
            "is_constructor": 1,
            "extends": "p5.Element",
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(40, 40);\n}\nfunction draw() {\n  background(200);\n  pg.background(100);\n  pg.noStroke();\n  pg.ellipse(pg.width/2, pg.height/2, 50, 50);\n  image(pg, 9, 30);\n  image(pg, 51, 30);\n}\n</code>\n</div>"
            ]
        },
        "p5.Image": {
            "name": "p5.Image",
            "shortname": "p5.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "submodule": "Image",
            "namespace": "",
            "file": "src/objects/p5.Image.js",
            "line": 24,
            "description": "Creates a new p5.Image. A p5.Image is a canvas backed representation of an\nimage. p5 can display .gif, .jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used, it must be loaded with the\nloadImage() function. The p5.Image class contains fields for the width and\nheight of the image, as well as an array called pixels[] that contains the\nvalues for every pixel in the image. The methods described below allow\neasy access to the image's pixels and alpha channel and simplify the\nprocess of compositing.\n\nBefore using the pixels[] array, be sure to use the loadPixels() method on\nthe image to make sure that the pixel data is properly loaded.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pInst",
                    "description": "An instance of a p5 sketch.",
                    "type": "Object"
                }
            ]
        },
        "p5.Table": {
            "name": "p5.Table",
            "shortname": "p5.Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Table",
            "namespace": "",
            "file": "src/objects/p5.Table.js",
            "line": 35,
            "description": "Table objects store data with multiple rows and columns, much\nlike in a traditional spreadsheet. Tables can be generated from\nscratch, dynamically, or using data from an existing file.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rows",
                    "description": "An array of p5.TableRow objects",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "p5.Table generated",
                "type": "p5.Table"
            }
        },
        "p5.TableRow": {
            "name": "p5.TableRow",
            "shortname": "p5.TableRow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Table",
            "namespace": "",
            "file": "src/objects/p5.TableRow.js",
            "line": 12,
            "description": "A TableRow object represents a single row of data values,\nstored in columns, from a table.\n\nA Table Row contains both an ordered array, and an unordered\nJSON object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "str",
                    "description": "optional: populate the row with a\n                            string of values, separated by the\n                            separator",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "separator",
                    "description": "comma separated values (csv) by default",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "p5.Vector": {
            "name": "p5.Vector",
            "shortname": "p5.Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "submodule": "Math",
            "namespace": "",
            "file": "src/objects/p5.Vector.js",
            "line": 14,
            "description": "A class to describe a two or three dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (x,y for 2D, and x,y,z for 3D). The magnitude\nand direction can be accessed via the methods mag() and heading(). In many\nof the p5.js examples, you will see p5.Vector used to describe a position,\nvelocity, or acceleration. For example, if you consider a rectangle moving\nacross the screen, at any given instant it has a position (a vector that\npoints from the origin to its location), a velocity (the rate at which the\nobject's position changes per time unit, expressed as a vector), and\nacceleration (the rate at which the object's velocity changes per time\nunit, expressed as a vector). Since vectors represent groupings of values,\nwe cannot simply use traditional addition/multiplication/etc. Instead,\nwe'll need to do some \"vector\" math, which is made easy by the methods\ninside the p5.Vector class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar v1 = createVector(40, 50);\nvar v2 = createVector(40, 50);\n\nellipse(v1.x, v1.y, 50, 50);\nellipse(v2.x, v2.y, 50, 50);\nv1.add(v2);\nellipse(v1.x, v1.y, 50, 50);\n</code>\n</div>"
            ]
        },
        "p5.dom": {
            "name": "p5.dom",
            "shortname": "p5.dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.dom",
            "submodule": "p5.dom",
            "namespace": ""
        },
        "p5.MediaElement": {
            "name": "p5.MediaElement",
            "shortname": "p5.MediaElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.dom",
            "submodule": "p5.dom",
            "namespace": "",
            "file": "lib/addons/p5.dom.js",
            "line": 864,
            "description": "Extends p5.Element to handle audio and video. In addition to the methods\nof p5.Element, it also contains methods for controlling media. It is not\ncalled directly, but p5.MediaElements are created by calling createVideo,\ncreateAudio, and createCapture.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "p5.sound": {
            "name": "p5.sound",
            "shortname": "p5.sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": ""
        },
        "p5.SoundFile": {
            "name": "p5.SoundFile",
            "shortname": "p5.SoundFile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 531,
            "description": "<p>SoundFile object with a path to a file.</p>\n\n<p>The p5.SoundFile may not be available immediately because\nit loads the file information asynchronously.</p>\n \n<p>To do something with the sound as soon as it loads\npass the name of a function as the second parameter.</p>\n\n<p>Only one file path is required. However, audio file formats \n(i.e. mp3, ogg, wav and m4a/aac) are not supported by all\nweb browsers. If you want to ensure compatability, instead of a single\nfile path, you may include an Array of filepaths, and the browser will\nchoose a format that works.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file (String). Optionally,\n                             you may include multiple file formats in\n                             an array.",
                    "type": "String/Array"
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "p5.SoundFile Object",
                "type": "Object"
            },
            "example": [
                " \n<div><code>\nfunction preload() {\n  mySound = loadSound('assets/doorbell.mp3');\n}\n\nfunction setup() {\n  mySound.play(0, 0.2, 0.2);\n}\n \n </code></div>"
            ]
        },
        "p5.Amplitude": {
            "name": "p5.Amplitude",
            "shortname": "p5.Amplitude",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 1504,
            "description": "Amplitude measures volume between 0.0 and 1.0.\nListens to all p5sound by default, or use setInput()\nto listen to a specific sound source. Accepts an optional\nsmoothing value, which defaults to 0.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "smoothing",
                    "description": "between 0.0 and .999 to smooth\n                           amplitude readings (defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Amplitude Object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar sound, amplitude;\n\nfunction preload(){\n  sound = loadSound('assets/beat.mp3');\n}\nfunction setup() { \n  amplitude = new p5.Amplitude();\n  sound.play();\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\n</code></div>"
            ]
        },
        "p5.FFT": {
            "name": "p5.FFT",
            "shortname": "p5.FFT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 1756,
            "description": "<p>FFT (Fast Fourier Transform) is an analysis algorithm that\nisolates individual\n<a href=\"https://en.wikipedia.org/wiki/Audio_frequency\">\naudio frequencies</a> within a waveform.</p>\n\n<p>Once instantiated, a p5.FFT object can return an array based on\ntwo types of analyses: <br> • <code>FFT.waveform()</code> computes\namplitude values along the time domain. The array indices correspond\nto samples across a brief moment in time. Each value represents\namplitude of the waveform at that sample of time.<br>\n• <code>FFT.analyze() </code> computes amplitude values along the\nfrequency domain. The array indices correspond to frequencies (i.e.\npitches), from the lowest to the highest that humans can hear. Each\nvalue represents amplitude at that slice of the frequency spectrum.\nUse with <code>getEnergy()</code> to measure amplitude at specific\nfrequencies, or within a range of frequencies. </p>\n\n<p>FFT analyzes a very short snapshot of sound called a sample\nbuffer. It returns an array of amplitude measurements, referred\nto as <code>bins</code>. The array is 1024 bins long by default.\nYou can change the bin array length, but it must be a power of 2\nbetween 16 and 1024 in order for the FFT algorithm to function\ncorrectly. The actual size of the FFT buffer is twice the \nnumber of bins, so given a standard sample rate, the buffer is\n2048/44100 seconds long.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smooth results of Freq Spectrum.\n                              0.0 < smoothing < 1.0.\n                              Defaults to 0.8.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bins",
                    "description": "Length of resulting array.\n                          Must be a power of two between\n                          16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "FFT Object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup(){\n  createCanvas(100,100);\n  sound.loop();\n  fft = new p5.FFT();\n}\n\nfunction draw(){\n  background(0);\n\n  var spectrum = fft.analyze(); \n  noStroke();\n  fill(0,255,0); // spectrum is green\n  for (var i = 0; i< spectrum.length; i++){\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width / spectrum.length, h )\n  }\n\n  var waveform = fft.waveform();\n  noFill();\n  beginShape();\n  stroke(255,0,0); // waveform is red\n  strokeWeight(1);\n  for (var i = 0; i< waveform.length; i++){\n    var x = map(i, 0, waveform.length, 0, width);\n    var y = map( waveform[i], 0, 255, 0, height);\n    vertex(x,y);\n  }\n  endShape();\n}\n\nfunction mouseClicked(){\n  sound.stop();\n}\n</code></div>"
            ]
        },
        "p5.Signal": {
            "name": "p5.Signal",
            "shortname": "p5.Signal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 2642,
            "description": "<p>p5.Signal is a constant audio-rate signal used by p5.Oscillator\nand p5.Envelope for modulation math.</p>\n\n<p>This is necessary because Web Audio is processed on a seprate clock.\nFor example, the p5 draw loop runs about 60 times per second. But\nthe audio clock must process samples 44100 times per second. If we\nwant to add a value to each of those samples, we can't do it in the\ndraw loop, but we can do it by adding a constant-rate audio signal.</p.\n\n<p>This class mostly functions behind the scenes in p5.sound, and returns\na Tone.Signal from the Tone.js library by Yotam Mann.\nIf you want to work directly with audio signals for modular\nsynthesis, check out\n<a href='http://bit.ly/1oIoEng' target=_'blank'>tone.js.</a></p>",
            "is_constructor": 1,
            "return": {
                "description": "A Signal object from the Tone.js library",
                "type": "Tone.Signal"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  carrier = new p5.Oscillator('sine');\n  carrier.amp(1); // set amplitude\n  carrier.freq(220); // set frequency\n  carrier.start(); // start oscillating\n  \n  modulator = new p5.Oscillator('sawtooth');\n  modulator.disconnect();\n  modulator.amp(1);\n  modulator.freq(4);\n  modulator.start();\n\n  // Modulator's default amplitude range is -1 to 1.\n  // Multiply it by -200, so the range is -200 to 200\n  // then add 220 so the range is 20 to 420\n  carrier.freq( modulator.mult(-200).add(220) );\n}\n</code></div>"
            ]
        },
        "p5.Oscillator": {
            "name": "p5.Oscillator",
            "shortname": "p5.Oscillator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 2788,
            "description": "<p>Creates a signal that oscillates between -1.0 and 1.0.\nBy default, the oscillation takes the form of a sinusoidal\nshape ('sine'). Additional types include 'triangle',\n'sawtooth' and 'square'. The frequency defaults to\n440 oscillations per second (440Hz, equal to the pitch of an\n'A' note).</p> \n\n<p>Set the type of oscillation with setType(), or by creating a\nspecific oscillator.</p> For example:\n<code>new p5.SinOsc(freq)</code>\n<code>new p5.TriOsc(freq)</code>\n<code>new p5.SqrOsc(freq)</code>\n<code>new p5.SawOsc(freq)</code>.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freq",
                    "description": "frequency defaults to 440Hz",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "type of oscillator. Options:\n                       'sine' (default), 'triangle',\n                       'sawtooth', 'square'",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Oscillator object",
                "type": "Object"
            }
        },
        "p5.Env": {
            "name": "p5.Env",
            "shortname": "p5.Env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 3249,
            "description": "<p>Envelopes are pre-defined amplitude distribution over time. \nThe p5.Env accepts up to four time/level pairs, where time\ndetermines how long of a ramp before value reaches level.\nTypically, envelopes are used to control the output volume\nof an object, a series of fades referred to as Attack, Decay,\nSustain and Release (ADSR). But p5.Env can control any\nWeb Audio Param, for example it can be passed to an Oscillator\nfrequency like osc.freq(env) </p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "aTime",
                    "description": "Time (in seconds) before level\n                               reaches attackLevel",
                    "type": "Number"
                },
                {
                    "name": "aLevel",
                    "description": "Typically an amplitude between\n                               0.0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "dTime",
                    "description": "Time",
                    "type": "Number"
                },
                {
                    "name": "dLevel",
                    "description": "Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar aT = 0.1; // attack time in seconds\nvar aL = 0.7; // attack level 0.0 to 1.0\nvar dT = 0.3; // decay time in seconds\nvar dL = 0.1; // decay level  0.0 to 1.0\nvar sT = 0.2; // sustain time in seconds\nvar sL = dL; // sustain level  0.0 to 1.0\nvar rT = 0.5; // release time in seconds\n// release level defaults to zero\n\nvar env;\nvar triOsc;\n\nfunction setup() {\n  env = new p5.Env(aT, aL, dT, dL, sT, sL, rT);\n  triOsc = new p5.Oscillator('triangle');\n  triOsc.amp(env); // give the env control of the triOsc's amp\n  triOsc.start();\n  env.play();\n}\n</code></div>"
            ]
        },
        "p5.Pulse": {
            "name": "p5.Pulse",
            "shortname": "p5.Pulse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 3604,
            "description": "Creates a Pulse object, an oscillator that implements\nPulse Width Modulation.\nThe pulse is created with two oscillators.\nAccepts a parameter for frequency, and to set the\nwidth between the pulses. See <a href=\"\nhttp://p5js.org/reference/#/p5.Oscillator\">\n<code>p5.Oscillator</code> for a full list of methods.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freq",
                    "description": "Frequency in oscillations per second (Hz)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "Width between the pulses (0 to 1.0,\n                       defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar pulse;\nfunction setup() {\n  background(0);\n  \n  // Create and start the pulse wave oscillator\n  pulse = new p5.Pulse();\n  pulse.amp(0.5);\n  pulse.freq(220);\n  pulse.start();\n}\n\nfunction draw() {\n  var w = map(mouseX, 0, width, 0, 1);\n  w = constrain(w, 0, 1);\n  pulse.width(w)\n}\n</code></div>"
            ]
        },
        "p5.Noise": {
            "name": "p5.Noise",
            "shortname": "p5.Noise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 3782,
            "description": "Noise is a type of oscillator that generates a buffer with random values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "Type of noise can be 'white' (default),\n                     'brown' or 'pink'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Noise Object",
                "type": "Object"
            }
        },
        "p5.AudioIn": {
            "name": "p5.AudioIn",
            "shortname": "p5.AudioIn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 3957,
            "description": "<p>Get audio from an input, i.e. your computer's microphone.</p>\n\n<p>Turn the mic on/off with the start() and stop() methods. When the mic\nis on, its volume can be measured with getLevel or by connecting an\nFFT object.</p>\n\n<p>If you want to hear the AudioIn, use the .connect() method. \nAudioIn does not connect to p5.sound output by default to prevent\nfeedback.</p> \n\n<p><em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/\nStream</a> API, which is not supported by certain browsers.</em></p>",
            "is_constructor": 1,
            "return": {
                "description": "AudioIn",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar mic;\nfunction setup(){\n  mic = new p5.AudioIn()\n  mic.start();\n}\nfunction draw(){\n  background(0);\n  micLevel = mic.getLevel();\n  ellipse(width/2, constrain(height-micLevel*height*5, 0, height), 10, 10);\n}\n</code></div>"
            ]
        },
        "p5.Filter": {
            "name": "p5.Filter",
            "shortname": "p5.Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 4209,
            "description": "A p5.Filter uses a Web Audio Biquad Filter to filter\nthe frequency response of an input source. Inheriting\nclasses include:<br/>\n* <code>p5.LowPass</code> - allows frequencies below\nthe cutoff frequency to pass through, and attenuates\nfrequencies above the cutoff.<br/>\n* <code>p5.HighPass</code> - the opposite of a lowpass\nfilter. <br/>\n* <code>p5.BandPass</code> -  allows a range of\nfrequencies to pass through and attenuates the frequencies\nbelow and above this frequency range.<br/>\n\nThe <code>.res()</code> method controls either width of the\nbandpass, or resonance of the low/highpass cutoff frequency.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "'lowpass' (default), 'highpass', 'bandpass'",
                    "type": "[String]"
                }
            ],
            "return": {
                "description": "p5.Filter",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar fft, noise, filter;\n\nfunction setup() {\n  fill(255, 40, 255);\n\n  filter = new p5.BandPass();\n\n  noise = new p5.Noise();\n  // disconnect unfiltered noise,\n  // and connect to filter\n  noise.disconnect();\n  noise.connect(filter);\n  noise.start();\n\n  fft = new p5.FFT();\n}\n\nfunction draw() {\n  background(30);\n\n  // set the BandPass frequency based on mouseX\n  var freq = map(mouseX, 0, width, 20, 10000);\n  filter.freq(freq);\n  // give the filter a narrow band (lower res = wider bandpass)\n  filter.res(50);\n\n  // draw filtered spectrum\n  var spectrum = fft.analyze();\n  noStroke();\n  for (var i = 0; i < spectrum.length; i++) {\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width/spectrum.length, h);\n  }\n}\n</code></div>"
            ]
        },
        "p5.Delay": {
            "name": "p5.Delay",
            "shortname": "p5.Delay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 4458,
            "description": "Delay is an echo effect. It processes an existing sound source,\nand outputs a delayed version of that sound. The p5.Delay can\nproduce different effects depending on the delayTime, feedback,\nfilter, and type. In the example below, a feedback of 0.5 will\nproduce a looping delay that decreases in volume by\n50% each repeat. A filter will cut out the high frequencies so\nthat the delay does not sound as piercing as the original source.",
            "is_constructor": 1,
            "return": {
                "description": "Returns a p5.Delay object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar noise, env, delay;\n\nfunction setup() {\n  noise = new p5.Noise('brown');\n  noise.start();\n  \n  delay = new p5.Delay();\n\n  // delay.process() accepts 4 parameters:\n  // source, delayTime, feedback, filter frequency\n  // play with these numbers!!\n  delay.process(noise, .12, .7, 2300);\n  \n  // play the noise with an envelope,\n  // a series of fades ( time / value pairs )\n  env = new p5.Env(.01, 0.2, .2, .1);\n  env.play(noise);\n}\n</code></div>"
            ]
        },
        "p5.Reverb": {
            "name": "p5.Reverb",
            "shortname": "p5.Reverb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 4717,
            "description": "Reverb adds depth to a sound through a large number of decaying\nechoes. It creates the perception that sound is occurring in a\nphysical space. The p5.Reverb has paramters for Time (how long does the\nreverb last) and decayRate (how much the sound decays with each echo)\nthat can be set with the .set() or .process() methods. The p5.Convolver\nextends p5.Reverb allowing you to recreate the sound of actual physical\nspaces through convolution.",
            "is_constructor": 1,
            "example": [
                "\n<div><code>\nvar soundFile, reverb;\nfunction preload() {\n  soundFile = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  reverb = new p5.Reverb();\n  soundFile.disconnect(); // so we'll only hear reverb...\n\n  // connect soundFile to reverb, process w/\n  // 3 second reverbTime, decayRate of 2%\n  reverb.process(soundFile, 3, 2);\n  soundFile.play();\n}\n</code></div>"
            ]
        },
        "p5.Convolver": {
            "name": "p5.Convolver",
            "shortname": "p5.Convolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 4894,
            "description": "<p>p5.Convolver extends p5.Reverb. It can emulate the sound of real\nphysical spaces through a process called <a href=\"\nhttps://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\">\nconvolution</a>.</p>\n\n<p>Convolution multiplies any audio input by an \"impulse response\"\nto simulate the dispersion of sound over time. The impulse response is\ngenerated from an audio file that you provide. One way to\ngenerate an impulse response is to pop a balloon in a reverberant space\nand record the echo. Convolution can also be used to experiment with\nsound.</p>\n\n<p>Use the method <code>createConvolution(path)</code> to instantiate a\np5.Convolver with a path to your impulse response audio file.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  // We have both MP3 and OGG versions of all sound assets\n  soundFormats('ogg', 'mp3');\n  \n  // Try replacing 'bx-spring' with other soundfiles like\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\n  cVerb = createConvolver('assets/bx-spring.mp3');\n\n  // Try replacing 'Damscray_DancingTiger' with\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ]
        },
        "p5.Phrase": {
            "name": "p5.Phrase",
            "shortname": "p5.Phrase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 5355,
            "description": "<p>A phrase is a pattern of musical events over time, i.e.\na series of notes and rests.</p>\n\n<p>Phrases must be added to a p5.Part for playback, and\neach part can play multiple phrases at the same time.\nFor example, one Phrase might be a kick drum, another\ncould be a snare, and another could be the bassline.</p>\n\n<p>The first parameter is a name so that the phrase can be\nmodified or deleted later. The callback is a a function that\nthis phrase will call at every step—for example it might be\ncalled <code>playNote(value){}</code>. The array determines\nwhich value is passed into the callback at each step of the\nphrase. It can be numbers, an object with multiple numbers,\nor a zero (0) indicates a rest so the callback won't be called).</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name so that you can access the Phrase.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The name of a function that this phrase\n                           will call. Typically it will play a sound,\n                           and accept two parameters: a value from the\n                           sequence array, followed by a time at which\n                           to play the sound.",
                    "type": "Function"
                },
                {
                    "name": "sequence",
                    "description": "Array of values to pass into the callback\n                          at each step of the phrase.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div><code>\nvar mySound;\nvar pattern = [1,0,0,2,0,2,0,0];\n\nfunction preload() {\n  mySound = loadSound('assets/beatbox.mp3');\n}\n\nfunction setup() {\n  var myPhrase = new p5.Phrase('bbox', makeSound, pattern);\n  var myPart = new p5.Part();\n  myPart.addPhrase(myPhrase);\n  myPart.setBPM(60);\n  myPart.start();\n}\n\nfunction makeSound(time, playbackRate) {\n  mySound.rate(playbackRate);\n  mySound.play(time);\n}\n</code></div>"
            ]
        },
        "p5.Part": {
            "name": "p5.Part",
            "shortname": "p5.Part",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 5421,
            "description": "A p5.Part plays back one or more p5.Phrases. Instantiate a part\nwith steps and tatums. By default, each step represents 1/16th note.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "steps",
                    "description": "Steps in the part",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tatums",
                    "description": "Divisions of a beat (default is 1/16, a quarter note)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar box, drum;\nvar boxPat = [1,0,0,2,0,2,0,0];\nvar drumPat = [0,1,1,0,2,0,1,0];\n\nfunction preload() {\n  box = loadSound('assets/beatbox.mp3');\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  var boxPhrase = new p5.Phrase('box', playBox, boxPat);\n  var drumPhrase = new p5.Phrase('drum', playDrum, drumPat);\n  var myPart = new p5.Part();\n  myPart.addPhrase(boxPhrase);\n  myPart.addPhrase(drumPhrase);\n  myPart.setBPM(60);\n  myPart.start();\n}\n\nfunction playBox(playbackRate, time) {\n  box.rate(playbackRate);\n  box.play(time);\n}\n\nfunction playDrum(playbackRate, time) {\n  drum.rate(playbackRate);\n  drum.play(time);\n}\n</code></div>"
            ]
        },
        "p5.Score": {
            "name": "p5.Score",
            "shortname": "p5.Score",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 5659,
            "description": "A Score consists of a series of Parts. The parts will\nbe played back in order. For example, you could have an\nA part, a B part, and a C part, and play them back in this order\n<code>new p5.Score(a, a, b, a, c)</code>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "part(s)",
                    "description": "Parts to add to the score.",
                    "type": "p5.Part"
                }
            ],
            "example": [
                "\n<div><code>\nvar box, drum;\nvar boxPat = [1,0,0,2,0,2,0,0];\nvar drumPat = [0,1,1,0,2,0,1,0];\nvar osc, env;\n\nfunction preload() {\n  box = loadSound('assets/beatbox.mp3');\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  var myPart = new p5.Part();\n  myPart.addPhrase('box', playBox, boxPat);\n  myPart.addPhrase('drum', playDrum, drumPat);\n  myPart.setBPM(60);\n  myPart.start();\n\n  osc = new p5.Oscillator();\n  env = new p5.Env(0.01, 1, 0.2, 0);\n}\n\nfunction playBox(playbackRate, time) {\n  box.rate(playbackRate);\n  box.play(time);\n}\n\nfunction playDrum(playbackRate, time) {\n  drum.rate(playbackRate)\n  drum.play(time);\n}\n</code></div>"
            ]
        },
        "p5.SoundRecorder": {
            "name": "p5.SoundRecorder",
            "shortname": "p5.SoundRecorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": "",
            "file": "lib/addons/p5.sound.js",
            "line": 5815,
            "description": "<p>Record sounds for playback and/or to save as a .wav file.\nThe p5.SoundRecorder records all sound output from your sketch,\nor can be assigned a specific source with setInput().</p>\n<p>The record() method accepts a p5.SoundFile as a parameter.\nWhen playback is stopped (either after the given amount of time,\nor with the stop() method), the p5.SoundRecorder will send its\nrecording to that p5.SoundFile for playback.</p>",
            "is_constructor": 1,
            "example": [
                "\n<div><code>\nvar mic, recorder, soundFile;\nvar state = 0;\n\nfunction setup() {\n  background(200);\n  // create an audio in\n  mic = new p5.AudioIn();\n  \n  // prompts user to enable their browser mic\n  mic.start();\n  \n  // create a sound recorder\n  recorder = new p5.SoundRecorder();\n  \n  // connect the mic to the recorder\n  recorder.setInput(mic);\n  \n  // this sound file will be used to\n  // playback & save the recording\n  soundFile = new p5.SoundFile();\n\n  text('keyPress to record', 20, 20);\n}\n\nfunction keyPressed() {\n  // make sure user enabled the mic\n  if (state === 0 && mic.enabled) {\n  \n    // record to our p5.SoundFile\n    recorder.record(soundFile);\n    \n    background(255,0,0);\n    text('Recording!', 20, 20);\n    state++;\n  }\n  else if (state === 1) {\n    background(0,255,0);\n\n    // stop recorder and\n    // send result to soundFile\n    recorder.stop(); \n    \n    text('Stopped', 20, 20);\n    state++;\n  }\n  \n  else if (state === 2) {\n    soundFile.play(); // play the result!\n    save(soundFile, 'mySound.wav');\n    state++;\n  }\n}\n</div></code>"
            ]
        }
    },
    "classitems": [
        {
            "file": "src/color/creating_reading.js",
            "line": 14,
            "description": "Extracts the alpha value from a color or pixel array.",
            "itemtype": "method",
            "name": "alpha",
            "params": [
                {
                    "name": "obj",
                    "description": "p5.Color object or pixel array",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nnoStroke();\nc = color(0, 126, 255, 102);\nfill(c);\nrect(15, 15, 35, 70);\nvalue = alpha(c);  // Sets 'value' to 102\nfill(value);\nrect(50, 15, 35, 70);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 40,
            "description": "Extracts the blue value from a color or a pixel array.",
            "itemtype": "method",
            "name": "blue",
            "params": [
                {
                    "name": "obj",
                    "description": "p5.Color object or pixel array",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nc = color(175, 100, 220);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\nblueValue = blue(c);  // Get blue in 'c'\nprintln(blueValue);  // Prints \"220.0\"\nfill(0, 0, blueValue);  // Use 'blueValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 67,
            "description": "Extracts the brightness value from a color.",
            "itemtype": "method",
            "name": "brightness",
            "params": [
                {
                    "name": "color",
                    "description": "p5.Color object",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = brightness(c);  // Sets 'value' to 255\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 93,
            "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent colorMode(). The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n\nNote that if only one value is provided to color(), it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency. If a single string parameter is provided it will be\ninterpreted as a CSS-compatible color string.\n\nColors are stored as Numbers or Arrays.",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value or red or hue value relative to\n                                the current color range, or a color string",
                    "type": "Number|String"
                },
                {
                    "name": "v2",
                    "description": "gray value or green or saturation value\n                                relative to the current color range (or\n                                alpha value if first param is gray value)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "gray value or blue or brightness value\n                                relative to the current color range",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "alpha",
                    "description": "alpha value relative to current color range",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "resulting color",
                "type": "Array"
            },
            "example": [
                "\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(30, 20, 55, 55);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nellipse(25, 25, 80, 80);  // Draw left circle\n\n// Using only one value with color()\n// generates a grayscale value.\nc = color(65);  // Update 'c' with grayscale value\nfill(c);  // Use updated 'c' as fill color\nellipse(75, 75, 80, 80);  // Draw right circle\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG & CSS colors may be used,\nc = color('magenta');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// as can hex color codes:\nc = color('#4F66A1');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// RGB and RGBA color strings are also supported:\n// these all set 'c' to the same color (solid blue)\nc = color('rgb(0,0,255)');\nc = color('rgb(0%, 0%, 100%)');\nc = color('rgba(0, 0, 255, 1)');\nc = color('rgba(0%, 0%, 100%, 1)');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();  // Don't draw a stroke around shapes\n\n// if switching from RGB to HSB both modes must be declared\ncolorMode(RGB, 255);  // Use RGB with scale of 0-255\nc = color(50, 55, 100);  // Create a color for 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(0, 10, 45, 80);  // Draw left rect\n\ncolorMode(HSB, 100);  // Use HSB with scale of 0-100\nc = color(50, 55, 100);  // Update 'c' with new color\nfill(c);  // Use updated 'c' as fill color\nrect(55, 10, 45, 80);  // Draw right rect\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 206,
            "description": "Extracts the green value from a color or pixel array.",
            "itemtype": "method",
            "name": "green",
            "params": [
                {
                    "name": "color",
                    "description": "p5.Color object",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nc = color(20, 75, 200);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\ngreenValue = green(c);  // Get green in 'c'\nprintln(greenValue);  // Print \"75.0\"\nfill(0, greenValue, 0);  // Use 'greenValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 233,
            "description": "Extracts the hue value from a color.",
            "itemtype": "method",
            "name": "hue",
            "params": [
                {
                    "name": "color",
                    "description": "p5.Color object",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = hue(c);  // Sets 'value' to \"0\"\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 259,
            "description": "Calculates a color or colors between two color at a specific increment,\nusing gamma correction to blend colors in the linear RGB space.\nThe amt parameter is the amount to interpolate between the two values\nwhere 0.0 equal to the first point, 0.1 is very near the first point,\n0.5 is halfway in between, etc. An amount below 0 will be treated as 0.\nLikewise, amounts above 1 will be capped at 1. This is different from\nthe behavior of lerp(), but necessary because otherwise numbers outside\nthe range will produce strange and unexpected colors.\n\nThe regular RGB color representation stores the square root of the \ndisplayed color, not the value itself. Your monitor behaves as if it \nsquares the color values before displaying it. lerpColor first transforms\ncolors into the linear color space before blending, to correctly mix the \ncolors as two rays of light.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "interpolate from this color",
                    "type": "Array/Number"
                },
                {
                    "name": "c2",
                    "description": "interpolate to this color",
                    "type": "Array/Number"
                },
                {
                    "name": "amt",
                    "description": "number between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "interpolated color",
                "type": "Array/Number"
            },
            "example": [
                "\n<div>\n<code>\nstroke(255);\nbackground(51);\nfrom = color(204, 102, 0);\nto = color(0, 102, 153);\ninterA = lerpColor(from, to, .33);\ninterB = lerpColor(from, to, .66);\nfill(from);\nrect(10, 20, 20, 60);\nfill(interA);\nrect(30, 20, 20, 60);\nfill(interB);\nrect(50, 20, 20, 60);\nfill(to);\nrect(70, 20, 20, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 322,
            "description": "Extracts the red value from a color or pixel array.",
            "itemtype": "method",
            "name": "red",
            "params": [
                {
                    "name": "obj",
                    "description": "p5.Color object or pixel array",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\nredValue = red(c);  // Get red in 'c'\nprintln(redValue);  // Print \"255.0\"\nfill(redValue, 0, 0);  // Use 'redValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 349,
            "description": "Extracts the saturation value from a color.",
            "itemtype": "method",
            "name": "saturation",
            "params": [
                {
                    "name": "color",
                    "description": "p5.Color object",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = saturation(c);  // Sets 'value' to 126\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/color/setting.js",
            "line": 22,
            "description": "The background() function sets the color used for the background of the\np5.js canvas. The default background is light gray. This function is\ntypically used within draw() to clear the display window at the beginning\nof each frame, but it can be used inside setup() to set the background on\nthe first frame of animation or if the background need only be set once.",
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                                              (depending on the current\n                                              color mode), color string,\n                                              p5.Color, or p5.Image",
                    "type": "Number|String|p5.Color|p5.Image"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                              (depending on the current\n                                              color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                              (depending on the current\n                                              color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nbackground(51);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nbackground(255, 204, 0);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nbackground(255, 204, 100);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nbackground('red');\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nbackground('#fae');\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nbackground('#222222');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nbackground('rgb(0,255,0)');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nbackground('rgba(0,255,0, 0.25)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nbackground('rgb(100%,0%,10%)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nbackground('rgba(100%,0%,100%,0.5)');\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nbackground(color(0, 0, 255));\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 140,
            "description": "Clears the pixels within a buffer. This function only works on p5.Canvas\nobjects created with the createCanvas() function; it won't work with the\nmain display window. Unlike the main graphics context, pixels in\nadditional graphics areas created with createGraphics() can be entirely\nor partially transparent. This function clears everything to make all of\nthe pixels 100% transparent.",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n<div>\n<code>\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 159,
            "description": "Changes the way p5.js interprets color data. By default, the parameters\nfor fill(), stroke(), background(), and color() are defined by values\nbetween 0 and 255 using the RGB color model. The colorMode() function is\nused to switch color systems.",
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RGB or HSB, corresponding to\n                              Red/Green/Blue and Hue/Saturation/Brightness",
                    "type": "Number|Constant"
                },
                {
                    "name": "max1",
                    "description": "range for the red or hue depending on the\n                              current color mode, or range for all values",
                    "type": "Number|Constant"
                },
                {
                    "name": "max2",
                    "description": "range for the green or saturation depending\n                              on the current color mode",
                    "type": "Number|Constant"
                },
                {
                    "name": "max3",
                    "description": "range for the blue or brightness depending\n                              on the current color mode",
                    "type": "Number|Constant"
                },
                {
                    "name": "maxA",
                    "description": "range for the alpha",
                    "type": "Number|Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(RGB, 100);\nfor (i = 0; i < 100; i++) {\n  for (j = 0; j < 100; j++) {\n    stroke(i, j, 0);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 100);\nfor (i = 0; i < 100; i++) {\n  for (j = 0; j < 100; j++) {\n    stroke(i, j, 100);\n    point(i, j);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 226,
            "description": "Sets the color used to fill shapes. For example, if you run\nfill(204, 102, 0), all subsequent shapes will be filled with orange. This\ncolor is either specified in terms of the RGB or HSB color depending on\nthe current colorMode(). (The default color space is RGB, with each value\nin the range from 0 to 255.) If a single string argument is provided, RGB,\nRGBA and Hex CSS color strings and all named color strings are supported.\nA p5 Color object can also be provided to set the fill color.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                                           (depending on the current color\n                                           mode), or color Array, or CSS\n                                           color string",
                    "type": "Number|Array|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                           (depending on the current\n                                           color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                           (depending on the current\n                                           color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nfill(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nfill(255, 204, 0);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nfill(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nfill('red');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nfill('#fae');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nfill('#222222');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nfill('rgb(0,255,0)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nfill('rgba(0,255,0, 0.25)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nfill('rgb(100%,0%,10%)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nfill('rgba(100%,0%,100%,0.5)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nfill(color(0, 0, 255));\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 345,
            "description": "Disables filling geometry. If both noStroke() and noFill() are called,\nnothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noFill",
            "example": [
                "\n<div>\n<code>\nrect(15, 10, 55, 55);\nnoFill();\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 363,
            "description": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noStroke",
            "example": [
                "\n<div>\n<code>\nnoStroke();\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/color/setting.js",
            "line": 380,
            "description": "Sets the color used to draw lines and borders around shapes. This color\nis either specified in terms of the RGB or HSB color depending on the\ncurrent colorMode() (the default color space is RGB, with each value in\nthe range from 0 to 255). If a single string argument is provided, RGB,\nRGBA and Hex CSS color strings and all named color strings are supported.\nA p5 Color object can also be provided to set the stroke color.",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                                           (depending on the current color\n                                           mode), or color Array, or CSS\n                                           color string",
                    "type": "Number|Array|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                           (depending on the current\n                                           color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                           (depending on the current\n                                           color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nstrokeWeight(4);\nstroke(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nstroke(255, 204, 0);\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nstrokeWeight(4);\nstroke(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nstroke('red');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nstroke('#fae');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nstroke('#222222');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nstroke('rgb(0,255,0)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nstroke('rgba(0,255,0,0.25)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nstroke('rgb(100%,0%,10%)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nstroke('rgba(100%,0%,100%,0.5)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nstroke(color(0, 0, 255));\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "src/core/constants.js",
            "line": 22,
            "description": "HALF_PI is a mathematical constant with the value\n1.57079632679489661923. It is half the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "HALF_PI",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "src/core/constants.js",
            "line": 31,
            "description": "PI is a mathematical constant with the value\n3.14159265358979323846. It is the ratio of the circumference\nof a circle to its diameter. It is useful in combination with\nthe trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "PI",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "src/core/constants.js",
            "line": 40,
            "description": "QUARTER_PI is a mathematical constant with the value 0.7853982.\nIt is one quarter the ratio of the circumference of a circle to\nits diameter. It is useful in combination with the trigonometric\nfunctions sin() and cos().",
            "itemtype": "property",
            "name": "QUARTER_PI",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "src/core/constants.js",
            "line": 49,
            "description": "TAU is an alias for TWO_PI, a mathematical constant with the\nvalue 6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "TAU",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "src/core/constants.js",
            "line": 58,
            "description": "TWO_PI is a mathematical constant with the value\n6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "TWO_PI",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "src/core/core.js",
            "line": 16,
            "description": "This is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure and it can also\ntake an optional node parameter for attaching the generated p5 canvas\nto a node.  The sketch closure takes the newly created p5 instance as\nits sole argument and may optionally set preload(), setup(), and/or\ndraw() properties on it for running a sketch.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object",
            "params": [
                {
                    "name": "sketch",
                    "description": "a closure that can set optional preload(),\n                             setup(), and/or draw() properties on the\n                             given p5 instance",
                    "type": "Function"
                },
                {
                    "name": "node",
                    "description": "element to attach canvas to, if a \n                                   boolean is passed in use it as sync",
                    "type": "HTMLElement|boolean"
                },
                {
                    "name": "sync",
                    "description": "start synchronously (optional)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "a p5 instance",
                "type": "P5"
            },
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/core/core.js",
            "line": 50,
            "description": "Called directly before setup(), the preload() function is used to handle\nasynchronous loading of external files. If a preload function is\ndefined, setup() will wait until any load calls within have finished.\nNothing besides load calls should be inside preload (loadImage,\nloadJSON, loadStrings, etc).",
            "itemtype": "method",
            "name": "preload",
            "example": [
                "\n<div><code>\nvar img;\nvar c;\nfunction preload() {  // preload() runs once\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {  // setup() waits until preload() is done\n  img.loadPixels();\n  // get color of middle pixel\n  c = img.get(img.width/2, img.height/2);\n}\n\nfunction draw() {\n  background(c);\n  image(img, 25, 25, 50, 50);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/core/core.js",
            "line": 79,
            "description": "The setup() function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one setup() function for each program and it shouldn't\nbe called again after its initial execution. Note: Variables declared\nwithin setup() are not accessible within other functions, including\ndraw().",
            "itemtype": "method",
            "name": "setup",
            "example": [
                "\n<div><code>\nvar a = 0;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nfunction draw() {\n  rect(a++%width, 10, 2, 80);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/core/core.js",
            "line": 105,
            "description": "Called directly after setup(), the draw() function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor noLoop() is called. draw() is called automatically and should never be\ncalled explicitly.\n\nIt should always be controlled with noLoop(), redraw() and loop(). After\nnoLoop() stops the code in draw() from executing, redraw() causes the\ncode inside draw() to execute once, and loop() will cause the code\ninside draw() to resume executing continuously.\n\nThe number of times draw() executes in each second may be controlled with\nthe frameRate() function.\n\nThere can only be one draw() function for each sketch, and draw() must\nexist if you want the code to run continuously, or to process events such\nas mousePressed(). Sometimes, you might have an empty call to draw() in\nyour program, as shown in the above example.",
            "itemtype": "method",
            "name": "draw",
            "example": [
                "\n<div><code>\nvar yPos = 0;\nfunction setup() {  // setup() runs once\n  frameRate(30);\n}\nfunction draw() {  // draw() loops forever, until stopped\n  background(204);\n  yPos = yPos - 1;\n  if (yPos < 0) {\n    yPos = height;\n  }\n  line(0, yPos, width, yPos);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/core/core.js",
            "line": 322,
            "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  createCanvas(200, 200);\n}\n\nfunction draw() {\n  ellipse(width/2, height/2, 0, 0);\n}\n\nfunction mousePressed() {\n  remove(); // remove whole sketch on mouse press\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 13,
            "description": "Adds a value to an Array, maps to Array.push.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "array",
                    "description": "Array to append",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "to be added to the Array",
                    "type": "Any"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 25,
            "description": "Copies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use concat().\n\nThe simplified version with only two arguments — arrayCopy(src, dst) —\ncopies an entire array to another of the same size. It is equivalent to\narrayCopy(src, 0, dst, 0, src.length).\n\nUsing this function is far more efficient for copying array data than\niterating through a for() loop and copying each element individually.",
            "itemtype": "method",
            "name": "arrayCopy",
            "params": [
                {
                    "name": "src",
                    "description": "the source Array",
                    "type": "Array"
                },
                {
                    "name": "srcPosition",
                    "description": "starting position in the source Array",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dst",
                    "description": "the destination Array",
                    "type": "Array"
                },
                {
                    "name": "dstPosition",
                    "description": "starting position in the destination Array",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "length",
                    "description": "number of Array elements to be copied",
                    "type": "Nimber",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 87,
            "description": "Concatenates two arrays, maps to Array.concat(). For example,\nconcatenating the array { 1, 2, 3 } and the array { 4, 5, 6 } yields\n{ 1, 2, 3, 4, 5, 6 }.",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "a",
                    "description": "first Array to concatenate",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "second Array to concatenate",
                    "type": "Array"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 100,
            "description": "Reverses the order of an array, maps to Array.reverse()",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "list",
                    "description": "Array to reverse",
                    "type": "Array"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 110,
            "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
            "itemtype": "method",
            "name": "shorten",
            "params": [
                {
                    "name": "list",
                    "description": "Array to shorten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "shortened Array",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 123,
            "description": "Randomizes the order of the elements of an array.\nImplements Fisher-Yates Shuffle Algorithm\nhttp://Bost.Ocks.org/mike/shuffle/\nhttp://en.Wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle",
            "itemtype": "method",
            "name": "shuffle",
            "params": [
                {
                    "name": "array",
                    "description": "Array to shuffle",
                    "type": "Array"
                },
                {
                    "name": "bool",
                    "description": "modify passed array",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "shuffled Array",
                "type": "Array"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n  print(regularArr);\n  shuffle(regularArr, true); // force modifications to passed array\n  print(regularArr);\n\n  // By default shuffle() returns a shuffled cloned array:\n  var newArr = shuffle(regularArr);\n  print(regularArr);\n  print(newArr);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 163,
            "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "list",
                    "description": "Array to sort",
                    "type": "Array"
                },
                {
                    "name": "count",
                    "description": "number of elements to sort, starting from 0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 185,
            "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "list",
                    "description": "Array to splice into",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "value to be spliced in",
                    "type": "Any"
                },
                {
                    "name": "position",
                    "description": "in the array from which to insert data",
                    "type": "Number"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 206,
            "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
            "itemtype": "method",
            "name": "subset",
            "params": [
                {
                    "name": "list",
                    "description": "Array to extract from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "position to begin",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "number of values to extract",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of extracted elements",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "src/data/conversion.js",
            "line": 13,
            "description": "Converts a string to its floating point representation. The contents of a\nstring must resemble a number, or NaN (not a number) will be returned. \nFor example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\") \nwill return NaN.",
            "itemtype": "method",
            "name": "float",
            "params": [
                {
                    "name": "str",
                    "description": "float string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "floating point representation of string",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nvar str = '20';\nvar diameter = float(str);\nellipse(width/2, height/2, diameter, diameter);\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 33,
            "description": "Converts a boolean, string, or float to its integer representation.\nWhen an array of values is passed in, then an int array of the same length \nis returned.",
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(int(\"10\")); // 10\nprint(int(10.31)); // 10\nprint(int(-10)); // -10\nprint(int(true)); // 1\nprint(int(false)); // 0\nprint(int([false, true, \"10.3\", 9.8])); // [0, 1, 10, 9]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 64,
            "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(str(\"10\"));  // \"10\"\nprint(str(10.31)); // \"10.31\"\nprint(str(-10));   // \"-10\"\nprint(str(true));  // \"true\"\nprint(str(false)); // \"false\"\nprint(str([true, \"10.3\", 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 90,
            "description": "Converts a number or string to its boolean representation.\nFor a number, any non-zero value (positive or negative) evaluates to true,\nwhile zero evaluates to false. For a string, the value \"true\" evaluates to\ntrue, while any other value evaluates to false. When an array of number or\nstring values is passed in, then a array of booleans of the same length is\nreturned.",
            "itemtype": "method",
            "name": "boolean",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "boolean representation of value",
                "type": "Boolean"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(boolean(0));               // false\nprint(boolean(1));               // true\nprint(boolean(\"true\"));          // true\nprint(boolean(\"abcd\"));          // false\nprint(boolean([0, 12, \"true\"])); // [false, true, false]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 122,
            "description": "Converts a number, string or boolean to its byte representation.\nA byte can be only a whole number between -128 and 127, so when a value\noutside of this range is converted, it wraps around to the corresponding\nbyte representation. When an array of number, string or boolean values is\npassed in, then an array of bytes the same length is returned.",
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "byte representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(byte(127));               // 127\nprint(byte(128));               // -128\nprint(byte(23.4));              // 23\nprint(byte(\"23.4\"));            // 23\nprint(byte(true));              // 1\nprint(byte([0, 255, \"100\"]));   // [0, -1, 100]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 151,
            "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned.",
            "itemtype": "method",
            "name": "char",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(char(65));                     // \"A\"\nprint(char(\"65\"));                   // \"A\"\nprint(char([65, 66, 67]));           // [ \"A\", \"B\", \"C\" ]\nprint(join(char([65, 66, 67]), '')); // \"ABC\"\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 179,
            "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unchar",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unchar(\"A\"));               // 65\nprint(unchar([\"A\", \"B\", \"C\"]));   // [ 65, 66, 67 ]\nprint(unchar(split(\"ABC\", \"\")));  // [ 65, 66, 67 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 202,
            "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned.",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "hexadecimal string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(hex(255));               // \"000000FF\"\nprint(hex(255, 6));            // \"0000FF\"\nprint(hex([0, 127, 255], 6));  // [ \"000000\", \"00007F\", \"0000FF\" ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/conversion.js",
            "line": 237,
            "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "integer representation of hexadecimal value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unhex(\"A\"));                // 10\nprint(unhex(\"FF\"));               // 255\nprint(unhex([\"FF\", \"AA\", \"00\"])); // [ 255, 170, 0 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 15,
            "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using nf() or\nnfs().",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "list",
                    "description": "array of Strings to be joined",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "String to be placed between each item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "joined String",
                "type": "String"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 30,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return matching groups (elements found inside parentheses) as a\nString array. If there are no matches, a null value will be returned.\nIf no groups are specified in the regular expression, but the sequence\nmatches, an array of length 1 (with the matched text as the first element\nof the array) will be returned.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, an array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nElement [0] of a regular expression match returns the entire matching\nstring, and the match groups start at element [1] (the first group is [1],\nthe second [2], and so on).",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings found",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 57,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on).",
            "itemtype": "method",
            "name": "matchAll",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "2d Array of Strings found",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 95,
            "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers.",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 146,
            "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                                 decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 182,
            "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for the digits, left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 214,
            "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for the digits, left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 246,
            "description": "The split() function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "the String used to separate the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 265,
            "description": "The splitTokens() function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space.",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "list of individual Strings that will be used as\n                         separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 285,
            "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "a String or Array of Strings to be trimmed",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "a trimmed String or Array of Strings",
                "type": "String|Array"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "src/environment/environment.js",
            "line": 21,
            "description": "The system variable frameCount contains the number of frames that have\nbeen displayed since the program started. Inside setup() the value is 0,\nafter the first iteration of draw it is 1, etc.",
            "itemtype": "property",
            "name": "frameCount",
            "example": [
                "\n  <div><code>\n    function setup() {\n      frameRate(30);\n    }\n\n    function draw() {\n      line(0, 0, width, height);\n      print(frameCount);\n    }\n  </code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 41,
            "description": "Confirms if a p5.js program is \"focused,\" meaning that it is active and\nwill accept mouse or keyboard input. This variable is \"true\" if it is\nfocused and \"false\" if not.",
            "itemtype": "property",
            "name": "focused",
            "example": [
                "\n  <div><code>\n    if (focused) {  // or \"if (focused === true)\"\n      ellipse(25, 25, 50, 50);\n    } else {\n      line(0, 0, 100, 100);\n      line(100, 0, 0, 100);\n    }\n  </code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 59,
            "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. It is not possible to load an\nimage as the cursor if you are exporting your program for the Web, and not\nall MODES work with all browsers. The values for parameters x and y must\nbe less than the dimensions of the image.",
            "itemtype": "method",
            "name": "cursor",
            "params": [
                {
                    "name": "type",
                    "description": "either ARROW, CROSS, HAND, MOVE, TEXT, or\n                              WAIT, or path for image",
                    "type": "Number/Constant"
                },
                {
                    "name": "x",
                    "description": "the horizontal active spot of the cursor",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the vertical active spot of the cursor",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n// Move the mouse left and right across the image\n// to see the cursor change from a cross to a hand\nfunction draw() {\n  line(width/2, 0, width/2, height);\n  if (mouseX < 50) {\n    cursor(CROSS);\n  } else {\n    cursor(HAND);\n  }\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 113,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second. This is the same as\nsetFrameRate(val).\n\nCalling frameRate() with no arguments returns the current framerate. This\nis the same as getFrameRate().",
            "itemtype": "method",
            "name": "frameRate",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 137,
            "description": "Returns the current framerate.",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 146,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second.\n\nCalling frameRate() with no arguments returns the current framerate.",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 161,
            "description": "Hides the cursor from view.",
            "itemtype": "method",
            "name": "noCursor",
            "example": [
                "\n<div><code>\nfunction setup() {\n  noCursor();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(mouseX, mouseY, 10, 10);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 182,
            "description": "System variable that stores the width of the entire screen display. This\nis used to run a full-screen program on any display size.",
            "itemtype": "property",
            "name": "displayWidth",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 194,
            "description": "System variable that stores the height of the entire screen display. This\nis used to run a full-screen program on any display size.",
            "itemtype": "property",
            "name": "displayHeight",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 206,
            "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth.",
            "itemtype": "property",
            "name": "windowWidth",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 217,
            "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight.",
            "itemtype": "property",
            "name": "windowHeight",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 229,
            "description": "The windowResized() function is called once every time the browser window\nis resized. This is a good place to resize the canvas or do any other \nadjustements to accomodate the new window size.",
            "itemtype": "property",
            "name": "windowResized",
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 263,
            "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the createCanvas() function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\ncreateCanvas() is not used in a program.",
            "itemtype": "property",
            "name": "width",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 274,
            "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the createCanvas() function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\ncreateCanvas() is not used in a program.",
            "itemtype": "property",
            "name": "height",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 285,
            "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow.",
            "itemtype": "method",
            "name": "fullscreen",
            "params": [
                {
                    "name": "val",
                    "description": "whether the sketch should be fullscreened or not",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "current fullscreen state",
                "type": "Boolean"
            },
            "example": [
                "\n<div>\n<code>\n// Clicking in the box toggles fullscreen on and off.\nfunction setup() {\n  background(200);\n}\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    var fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 327,
            "description": "Toggles pixel scaling for high pixel density displays. By default\npixel scaling is on, call devicePixelScaling(false) to turn it off.\nThis devicePixelScaling() function must be the first line of code\ninside setup().",
            "itemtype": "method",
            "name": "devicePixelScaling",
            "params": [
                {
                    "name": "val",
                    "description": "whether or how much the sketch should scale",
                    "type": "Boolean|Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  devicePixelScaling(false);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width/2, height/2, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  devicePixelScaling(3.0);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width/2, height/2, 50, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 403,
            "description": "Gets the current URL.",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "url",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nvar url;\nvar x = 100;    \n\nfunction setup() {\n  fill(0);\n  noStroke();\n  url = getURL();    \n}    \n\nfunction draw() {\n  background(200);\n  text(url, x, height/2);\n  x--;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 430,
            "description": "Gets the current URL path as an array.",
            "itemtype": "method",
            "name": "getURLPath",
            "return": {
                "description": "path components",
                "type": "Array"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  var urlPath = getURLPath();\n  for (var i=0; i&lt;urlPath.length; i++) {\n    text(urlPath[i], 10, i*20+20);\n  }\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 447,
            "description": "Gets the current URL params as an Object.",
            "itemtype": "method",
            "name": "getURLParams",
            "return": {
                "description": "URL params",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'>\n<code>\n// Example: http://p5js.org?year=2014&month=May&day=15\n\nfunction setup() {\n  var params = getURLParams();  \n  text(params.day, 10, 20);\n  text(params.month, 10, 40);\n  text(params.year, 10, 60);  \n}    \n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 5,
            "description": "This module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 31,
            "description": "Returns the pixel buffer for a canvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "the canvas to get pixels from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "a one-dimensional array containing\n                                  the data in thc RGBA order, with integer\n                                  values between 0 and 255",
                "type": "Uint8ClampedArray"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 54,
            "description": "Returns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "i",
                    "description": "index of a 1D Image Array",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "32 bit integer value representing\n                                 ARGB value.",
                "type": "Integer"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 73,
            "description": "Modifies pixels RGBA values to values contained in the data object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixels",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "data",
                    "description": "source 1D array where each value\n                                  represents ARGB values",
                    "type": "Int32Array"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 93,
            "description": "Returns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "canvas to get image data from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "Holder of pixel data (and width and\n                                  height) for a canvas",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 116,
            "description": "Returns a blank ImageData object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 132,
            "description": "Applys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "params": [
                {
                    "name": "func",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "canvas",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "level",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 171,
            "description": "Converts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 206,
            "description": "Converts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 228,
            "description": "Sets the alpha channel to entirely opaque. No parameter is used.",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 243,
            "description": "Sets each pixel to its inverse value. No parameter is used.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Invert"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 259,
            "description": "Limits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 290,
            "description": "reduces the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 371,
            "description": "increases the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "src/image/image.js",
            "line": 9,
            "description": "This module defines the p5 methods for the p5.Image class\nfor drawing images to the main display canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 23,
            "description": "Creates a new p5.Image (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.\n\n.pixels gives access to an array containing the values for all the pixels \nin the display window.\nThese values are numbers. This array is the size of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from \nleft to right across each row, then down each column. See .pixels for\nmore info. It may also be simpler to use set() or get().\n<br><br>\nBefore accessing the pixels of an image, the data must loaded with the \nloadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes.",
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the p5.Image object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102)); \n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, i % img.width * 2)); \n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>\n\n<div>\n<code>\nvar pink = color(255, 102, 204);\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < 4*(width*height/2); i+=4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i+1] = green(pink);\n  img.pixels[i+2] = blue(pink);\n  img.pixels[i+3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 16,
            "description": "Loads an image from a path and creates a p5.Image from it.\n\nThe image may not be immediately available for rendering\nIf you want to ensure that the image is ready before doing\nanything with it you can do perform those operations in the\ncallback, or place the loadImage() call in preload().",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "path",
                    "description": "Path of the image to be loaded",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "Function to be called once \n                               the image is loaded. Will be passed the \n                               p5.Image.",
                    "type": "Function(p5.Image)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "called with event error if \n                               the image fails to load.",
                    "type": "Function(Event)",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5.Image object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage(\"assets/laDefense.jpg\", function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 92,
            "description": "Draw an image to the main canvas of the p5js sketch",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "image",
                    "description": "the image to display",
                    "type": "p5.Image"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the image",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the image",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "width to display the image",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height to display the image",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage(\"assets/laDefense.jpg\", function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 159,
            "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with colorMode()).\n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by colorMode(). The default maximum value is\n255.",
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array",
                    "type": "Number|Array"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204);  // Tint blue\n  image(img, 50, 0);\n}\n</code>\n</div>\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204, 126);  // Tint blue and set transparency\n  image(img, 50, 0);\n}\n</code>\n</div>\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(255, 126);  // Apply transparency without changing color\n  image(img, 50, 0);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 226,
            "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
            "itemtype": "method",
            "name": "noTint",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 236,
            "description": "Apply the current tint color to the input image, return the resulting\ncanvas.",
            "params": [
                {
                    "name": "The",
                    "description": "image to be tinted",
                    "type": "p5.Image"
                }
            ],
            "return": {
                "description": "The resulting tinted canvas",
                "type": "Canvas"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/loading_displaying.js",
            "line": 271,
            "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to image() are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of image() as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n\nimageMode(CORNERS) interprets the second and third parameters of image()\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\nimageMode(CENTER) interprets the second and third parameters of image()\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height.",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "m",
                    "description": "The mode: either CORNER, CORNERS, or CENTER.",
                    "type": "String"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/image/pixels.js",
            "line": 15,
            "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from \nleft to right across each row, then down each column. For example, \nif the image is 100x100 pixels, there will be 40000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at \n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0). More generally, to set values for a pixel\nat (x, y): \n<code>pixels[y*width+x] = r; \npixels[y*width+x+1] = g;\npixels[y*width+x+2] = b;\npixels[y*width+x+3] = a;</code>\n<br><br>\nBefore accessing this array, the data must loaded with the loadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes.",
            "itemtype": "property",
            "name": "pixels[]",
            "example": [
                "\n<div>\n<code>\nvar pink = color(255, 102, 204);\nloadPixels();\nfor (var i = 0; i < 4*(width*height/2); i+=4) {\n  pixels[i] = red(pink);\n  pixels[i+1] = green(pink);\n  pixels[i+2] = blue(pink);\n  pixels[i+3] = alpha(pink);\n}\nupdatePixels();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 52,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.<br><br>\nAvailable blend modes are: BLEND | DARKEST | LIGHTEST | DIFFERENCE | \nMULTIPLY| EXCLUSION | SCREEN | REPLACE | OVERLAY | HARD_LIGHT | \nSOFT_LIGHT | DODGE | BURN | ADD | NORMAL",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 133,
            "description": "Copies a region of the canvas to another region of the canvas  \nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 186,
            "description": "Applies a filter to the canvas",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "operation",
                    "description": "one of threshold, gray, invert,\n                                     posterize and opaque. see filters.js\n                                     for docs on each available filter",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 199,
            "description": "Returns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned. \nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When \ngetting an image, the x and y parameters define the coordinates for the \nupper-left corner of the image, regardless of the current imageMode().\n\nIf the pixel requested is outside of the image window, [0,0,0,255] is \nreturned. To get the numbers scaled according to the current color ranges\nand taking into account colorMode, use getColor instead of get.\n\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from pixels[]. The equivalent statement to\nget(x, y) using pixels[] is [ pixels[y*width+x], pixels[y*width+x+1], \npixels[y*width+x+2], pixels[y*width+3] ]. See the reference for\npixels[] for more information.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "values of pixel at x,y in array format\n                             [R, G, B, A] or p5.Image",
                "type": "Array|p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get();\n  image(c, width/2, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get(50, 90);\n  fill(c);\n  noStroke();\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 295,
            "description": "Loads the pixel data for the display window into the pixels[] array. This\nfunction must always be called before reading from or writing to pixels[].",
            "itemtype": "method",
            "name": "loadPixels",
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var halfImage = 4 * img.width * img.height/2;\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i+halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 332,
            "description": "<p>Changes the color of any pixel, or writes an image directly to the \ndisplay window.</p>\n<p>The x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a p5.COlor object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current imageMode().\n</p>\n<p>Setting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into pixels[]. The equivalent statement\nto set(x, y, [100, 50, 10, 255]) using pixels[] is:</p>\n<pre><code class=\"language-markup\">pixels[4*(y*width+x)] = 100;\npixels[4*(y*width+x)+1] = 50;\npixels[4*(y*width+x)+2] = 10;\npixels[4*(y*width+x)+3] = 255;</code></pre>\n<p>See the reference for pixels[] for more information.</p>",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "insert a grayscale value | a pixel array |\n                               a p5.Color object | a p5.Image to copy",
                    "type": "Number|Array|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar black = color(0);\nset(30, 20, black);\nset(85, 20, black);\nset(85, 75, black);\nset(30, 75, black);\nupdatePixels();\n</code>\n</div> \n\n<div>\n<code>\nfor (var i = 30; i < width-15; i++) {\n  for (var j = 20; j < height-25; j++) {\n    var c = color(204-j, 153-i, 0);\n    set(i, j, c);\n  }\n}\nupdatePixels();\n</code>\n</div> \n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  set(0, 0, img);\n  updatePixels();\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/image/pixels.js",
            "line": 439,
            "description": "Updates the display window with the data in the pixels[] array.\nUse in conjunction with loadPixels(). If you're only reading pixels from\nthe array, there's no need to call updatePixels() — updating is only\nnecessary to apply changes. updatePixels() should be called anytime the \npixels array is manipulated or set() is called.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the upper-left corner of region \n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the upper-left corner of region \n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of region to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "height of region to update",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var halfImage = 4 * img.width * img.height/2;\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i+halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 13,
            "description": "The system variable deviceOrientation always contains the orientation of\nthe device. The value of this variable will either be set 'landscape'\nor 'portrait'. If no data is avaliable it will be set to 'undefined'.",
            "itemtype": "property",
            "name": "deviceOrientation",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 22,
            "description": "The system variable accelerationX always contains the acceleration of the\ndevice along the x axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationX",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 30,
            "description": "The system variable accelerationY always contains the acceleration of the\ndevice along the y axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationY",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 38,
            "description": "The system variable accelerationZ always contains the acceleration of the\ndevice along the z axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationZ",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 46,
            "description": "The system variable pAccelerationX always contains the acceleration of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationX",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 55,
            "description": "The system variable pAccelerationY always contains the acceleration of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationY",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 64,
            "description": "The system variable pAccelerationZ always contains the acceleration of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationZ",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 73,
            "description": "_updatePAccelerations updates the pAcceleration values",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 86,
            "description": "The setMoveThreshold() function is used to set the movement threshold for\nthe onDeviceMove() function.",
            "itemtype": "method",
            "name": "setMoveThreshold",
            "params": [
                {
                    "name": "value",
                    "description": "The threshold value",
                    "type": "Number"
                }
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 102,
            "description": "The onDeviceMove() function is called when the devices orientation changes\nby more than the threshold value.",
            "itemtype": "method",
            "name": "onDeviceMove",
            "example": [
                "\n<div>\n<code>\n// Run this example on a mobile device\n// Move the device around\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction onDeviceMove() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/acceleration.js",
            "line": 128,
            "description": "The onDeviceTurn() function is called when the device rotates by\nmore than 90 degrees.",
            "itemtype": "method",
            "name": "onDeviceTurn",
            "example": [
                "\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction onDeviceTurn() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Acceleration"
        },
        {
            "file": "src/input/files.js",
            "line": 31,
            "description": "Loads a JSON file from a file or a URL, and returns an Object or Array.\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   loadJSON()\n                                   completes, Array is passed in as first\n                                   argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\" or \"jsonp\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "JSON data",
                "type": "Object|Array"
            },
            "example": [
                "\n\n<p>Calling loadJSON() inside preload() guarantees to complete the\noperation before setup() and draw() are called.</p>\n\n<div><code>\nvar weather;\nfunction preload() {\n  var url = 'http://api.openweathermap.org/data/2.5/weather?q=London,UK';\n  weather = loadJSON(url);\n}\n\nfunction setup() {\n  noLoop();\n}\n\nfunction draw() {\n  background(200);\n  // get the humidity value out of the loaded JSON\n  var humidity = weather.main.humidity;\n  fill(0, humidity); // use the humidity value to set the alpha\n  ellipse(width/2, height/2, 50, 50);\n}\n</code></div>\n\n<p>Outside preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  noLoop();\n  var url = 'http://api.openweathermap.org/data/2.5/weather?q=NewYork,USA';\n  loadJSON(url, drawWeather);\n}\n\nfunction draw() {\n  background(200);\n}\n\nfunction drawWeather(weather) {\n  // get the humidity value out of the loaded JSON\n  var humidity = weather.main.humidity;\n  fill(0, humidity); // use the humidity value to set the alpha\n  ellipse(width/2, height/2, 50, 50);\n}\n</code></div>\n"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 118,
            "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed.",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after loadStrings()\n                              completes, Array is passed in as first\n                              argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "example": [
                "\n\n<p>Calling loadStrings() inside preload() guarantees to complete the\noperation before setup() and draw() are called.</p>\n\n<div><code>\nvar result;\nfunction preload() {\n  result = loadStrings('assets/test.txt');\n}\n\nfunction setup() {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>\n\n<p>Outside preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  loadStrings('assets/test.txt', pickString);\n}\n\nfunction pickString(result) {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 189,
            "description": "<p>Reads the contents of a file or URL and creates a p5.Table object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.</p>\n\n<p>Possible options include:\n<ul>\n<li>csv - parse the table as comma-separated values</li>\n<li>tsv - parse the table as tab-separated values</li>\n<li>header - this table has a header (title) row</li>\n</ul>\n</p>\n\n<p>When passing in multiple options, pass them in as separate parameters,\nseperated by commas. For example: \"csv, header\".</p>\n\n<p> All files loaded and saved use UTF-8 encoding.</p>\n\n<p>This method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling loadTable() inside preload()\nguarantees to complete the operation before setup() and draw() are called.\nOutside preload(), you may supply a callback function to handle the object.\n</p>",
            "itemtype": "method",
            "name": "loadTable",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "\"header\" \"csv\" \"tsv\"",
                    "type": "String|Strings",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                    loadTable() completes, Table object is\n                                    passed in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Table object containing data",
                "type": "Object"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 417,
            "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling loadXML() inside preload()\nguarantees to complete the operation before setup() and draw() are called.\nOutside preload(), you may supply a callback function to handle the object.",
            "itemtype": "method",
            "name": "loadXML",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after loadXML()\n                              completes, XML object is passed in as\n                              first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "XML object containing data",
                "type": "Object"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 476,
            "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.",
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 495,
            "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.",
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/files.js",
            "line": 513,
            "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.",
            "itemtype": "method",
            "name": "httpDo",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "either \"GET\", \"POST\", or \"PUT\",\n                                   defaults to \"GET\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Files"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 13,
            "description": "Holds the key codes of currently pressed keys.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 19,
            "description": "The boolean system variable keyIsPressed is true if any key is pressed\nand false if no keys are pressed.",
            "itemtype": "property",
            "name": "keyIsPressed",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  if (keyIsPressed === true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 42,
            "description": "The system variable key always contains the value of the most recent\nkey on the keyboard that was typed. To get the proper capitalization, it\nis best to use it within keyTyped(). For non-ASCII keys, use the keyCode\nvariable.",
            "itemtype": "property",
            "name": "key",
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 52,
            "description": "The variable keyCode is used to detect special keys such as BACKSPACE,\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.",
            "itemtype": "property",
            "name": "keyCode",
            "example": [
                "\n<div><code>\nvar fillVal = 126;\nfunction draw() {\n  fill(fillVal);\n  rect(25, 25, 50, 50);\n}\n\nfunction keyPressed() {\n  if (keyCode == UP_ARROW) {\n    fillVal = 255;\n  } else if (keyCode == DOWN_ARROW) {\n    fillVal = 0;\n  } \n  return false; // prevent default\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 78,
            "description": "The keyPressed() function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the keyCode variable.\n<br><br>\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n<br><br>\nFor ASCII keys that was pressed is stored in the key variable. However, it\ndoes not distinguish between uppercase and lowercase. For this reason, it\nis recommended to use keyTyped() to read the key variable, in which the\ncase of the variable will be distinguished.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nmay cause multiple calls to keyTyped() (and keyReleased() as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyPressed",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 153,
            "description": "The keyReleased() function is called once every time a key is released.\nSee key and keyCode for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyReleased",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 200,
            "description": "The keyTyped() function is called once every time a key is pressed, but\naction keys such as Ctrl, Shift, and Alt are ignored. The most recent\nkey pressed will be stored in the key variable.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nwill cause multiple calls to keyTyped(), the rate is set by the operating\nsystem and how each computer is configured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyTyped",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyTyped() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 243,
            "description": "The onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will no fire if the user is\nnot focused on the element we must assume all keys currently down have \nbeen released.",
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 253,
            "description": "The keyIsDown function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable keyCode names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.",
            "itemtype": "method",
            "name": "keyIsDown",
            "params": [
                {
                    "name": "code",
                    "description": "The key to check for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether key is down or not",
                "type": "Boolean"
            },
            "example": [
                "\n<div><code>\nvar x = 100;\nvar y = 100;\n\nfunction setup() {\n  createCanvas(512, 512);\n}\n\nfunction draw() {\n  if (keyIsDown(LEFT_ARROW))\n    x-=5;\n\n  if (keyIsDown(RIGHT_ARROW))\n    x+=5;\n\n  if (keyIsDown(UP_ARROW))\n    y-=5;\n\n  if (keyIsDown(DOWN_ARROW))\n    y+=5;\n\n  clear();\n  fill(255, 0, 0);\n  ellipse(x, y, 50, 50);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Keyboard"
        },
        {
            "file": "src/input/mouse.js",
            "line": 16,
            "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas.",
            "itemtype": "property",
            "name": "mouseX",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n background(204);\n line(mouseX, 20, mouseX, 80);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 34,
            "description": "The system variable mouseY always contains the current vertical position\nof the mouse, relative to (0, 0) of the canvas.",
            "itemtype": "property",
            "name": "mouseY",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 42,
            "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the canvas.",
            "itemtype": "property",
            "name": "pmouseX",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 51,
            "description": "The system variable pmouseY always contains the vertical position of the\nmouse in the frame previous to the current frame, relative to (0, 0) of\nthe canvas.",
            "itemtype": "property",
            "name": "pmouseY",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 60,
            "description": "The system variable winMouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseX",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 68,
            "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseY",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 76,
            "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window.",
            "itemtype": "property",
            "name": "pwinMouseX",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 85,
            "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window.",
            "itemtype": "property",
            "name": "pwinMouseY",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 94,
            "description": "Processing automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button is pressed. Browsers are\nweird, USE AT YOUR OWN RISK FOR NOW!",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n if (mousePressed && (mouseButton == LEFT)) {\n   fill(0);\n } else if (mousePressed && (mouseButton == RIGHT)) {\n   fill(255);\n } else {\n   fill(126);\n }\n rect(25, 25, 50, 50);\n}\n// Click within the image and press\n// the left and right mouse buttons to\n// change the value of the rectangle\nfunction draw() {\n rect(25, 25, 50, 50);\n}\n\nfunction mousePressed() {\n if (mouseButton == LEFT) {\n   fill(0);\n } else if (mouseButton == RIGHT) {\n   fill(255);\n } else {\n   fill(126);\n }\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "mouseButton",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 135,
            "description": "The boolean system variable mouseIsPressed is true if the mouse is pressed\nand false if not.",
            "itemtype": "property",
            "name": "mouseIsPressed",
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\nfunction draw() {\n  if (mouseIsPressed == true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 206,
            "description": "The mouseMoved() function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "mouseMoved",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 245,
            "description": "The mouseDragged() function is called once every time the mouse moves and\na mouse button is pressed. If no mouseDragged() function is defined, the\ntouchMoved() function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "mouseDragged",
            "example": [
                "\n<div>\n<code>\n// Drag the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseDragged() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseDragged() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 312,
            "description": "The mousePressed() function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\nmousePressed() function is defined, the touchStarted() function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "mousePressed",
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mousePressed() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mousePressed() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 375,
            "description": "The mouseReleased() function is called every time a mouse button is\nreleased. If no mouseReleased() function is defined, the touchEnded()\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "mouseReleased",
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseReleased() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseReleased() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 436,
            "description": "The mouseClicked() function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "mouseClicked",
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseClicked() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/mouse.js",
            "line": 486,
            "description": "The event.wheelDelta or event.detail property returns negative values if\nthe mouse wheel if rotated up or away from the user and positive in the\nother direction. On OS X with \"natural\" scrolling enabled, the values are\nopposite.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.\n\nSee <a href=\"http://www.javascriptkit.com/javatutors/onmousewheel.shtml\">\nmouse wheel event in JS</a>.",
            "itemtype": "method",
            "name": "mouseWheel",
            "class": "p5",
            "module": "Input",
            "submodule": "Mouse"
        },
        {
            "file": "src/input/time_date.js",
            "line": 13,
            "description": "p5.js communicates with the clock on your computer. The day() function\nreturns the current day as a value from 1 - 31.",
            "itemtype": "method",
            "name": "day",
            "return": {
                "description": "the current day",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 24,
            "description": "p5.js communicates with the clock on your computer. The hour() function\nreturns the current hour as a value from 0 - 23.",
            "itemtype": "method",
            "name": "hour",
            "return": {
                "description": "the current hour",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 35,
            "description": "p5.js communicates with the clock on your computer. The minute() function\nreturns the current minute as a value from 0 - 59.",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "the current minute",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 46,
            "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the program. This information is often used for timing events and\nanimation sequences.",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "the number of milliseconds since starting the program",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 58,
            "description": "p5.js communicates with the clock on your computer. The month() function\nreturns the current month as a value from 1 - 12.",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "the current month",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 69,
            "description": "p5.js communicates with the clock on your computer. The second() function\nreturns the current second as a value from 0 - 59.",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "the current second",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/time_date.js",
            "line": 80,
            "description": "p5.js communicates with the clock on your computer. The year() function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "the current year",
                "type": "Number"
            },
            "class": "p5",
            "module": "Input",
            "submodule": "Time & Date"
        },
        {
            "file": "src/input/touch.js",
            "line": 13,
            "description": "The system variable touchX always contains the horizontal position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array.",
            "itemtype": "property",
            "name": "touchX",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 23,
            "description": "The system variable touchY always contains the vertical position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array.",
            "itemtype": "property",
            "name": "touchY",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 33,
            "description": "The system variable ptouchX always contains the horizontal position of\none finger, relative to (0, 0) of the canvas, in the frame previous to the\ncurrent frame.",
            "itemtype": "property",
            "name": "ptouchX",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 42,
            "description": "The system variable ptouchY always contains the vertical position of\none finger, relative to (0, 0) of the canvas, in the frame previous to the\ncurrent frame.",
            "itemtype": "property",
            "name": "ptouchY",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 51,
            "description": "The system variable touches[] contains an array of the positions of all\ncurrent touch points, relative to (0, 0) of the canvas. Each element in\nthe array is an object with x and y properties.",
            "itemtype": "property",
            "name": "touches[]",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 60,
            "description": "The boolean system variable touchIsDown is true if the screen is\ntouched and false if not.",
            "itemtype": "property",
            "name": "touchIsDown",
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 103,
            "description": "The touchStarted() function is called once after every time a touch is\nregistered. If no touchStarted() function is defined, the mousePressed()\nfunction will be called instead if it is defined. Browsers may have\ndifferent default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "touchStarted",
            "example": [
                "\n<div>\n<code>\n// Touch within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchStarted() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchStarted() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 162,
            "description": "The touchMoved() function is called every time a touch move is registered.\nIf no touchStarted() function is defined, the mouseDragged() function will\nbe called instead if it is defined. Browsers may have different default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "touchMoved",
            "example": [
                "\n<div>\n<code>\n// Move your finger across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchMoved() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/input/touch.js",
            "line": 218,
            "description": "The touchEnded() function is called every time a touch ends. If no\ntouchStarted() function is defined, the mouseReleased() function will be\ncalled instead if it is defined. Browsers may have different default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method.",
            "itemtype": "method",
            "name": "touchEnded",
            "example": [
                "\n<div>\n<code>\n// Release touch within the image to\n// change the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchEnded() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchEnded() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Input",
            "submodule": "Touch"
        },
        {
            "file": "src/math/calculation.js",
            "line": 13,
            "description": "Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive.",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "n",
                    "description": "number to compute",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "absolute value of given number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 23,
            "description": "Calculates the closest int value that is greater than or equal to the\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\nreturns the value 10.",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "n",
                    "description": "number to round up",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded up number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 34,
            "description": "Constrains a value to not exceed a maximum and minimum value.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "n",
                    "description": "number to constrain",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "high",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "constrained number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 47,
            "description": "Calculates the distance between two points.",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 61,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "n",
                    "description": "exponent to raise",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "e^n",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 71,
            "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "n",
                    "description": "number to round down",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded down number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 81,
            "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, etc. The lerp function is convenient for creating\nmotion along a straight path and for drawing dotted lines.",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "start",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "number between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "lerped value",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 98,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "n",
                    "description": "number greater than 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "natural logarithm of n",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 109,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, mag() is\na shortcut for writing dist(0, 0, x, y).",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "second value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "magnitude of vector from (0,0) to (a,b)",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 125,
            "description": "Re-maps a number from one range to another.\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the incoming value to be converted",
                    "type": "Number"
                },
                {
                    "name": "start1",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop1",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "start2",
                    "description": "lower bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's target range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "remapped number",
                "type": "Number"
            },
            "example": [
                "\n  <div><code>\n    createCanvas(200, 200);\n    var value = 25;\n    var m = map(value, 0, 100, 0, width);\n    ellipse(m, 200, 10, 10);\n  </code></div>\n\n  <div><code>\n    function setup() {\n      createCanvs(200, 200);\n      noStroke();\n    }\n\n    function draw() {\n      background(204);\n      var x1 = map(mouseX, 0, width, 50, 150);\n      ellipse(x1, 75, 50, 50);  \n      var x2 = map(mouseX, 0, width, 0, 200);\n      ellipse(x2, 125, 50, 50);  \n    }\n  </code></div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 165,
            "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. max() accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "n0",
                    "description": "Numbers to compare",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "maximum Number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 182,
            "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. min() accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "n0",
                    "description": "Numbers to compare",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "minimum Number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 199,
            "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the second\nexample above.)",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "value",
                    "description": "incoming value to be normalized",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "normalized number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 216,
            "description": "Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to\nMath.pow().",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "n",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "power by which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "n^e",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 230,
            "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "n",
                    "description": "number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 240,
            "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "n",
                    "description": "number to square",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "squared number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/calculation.js",
            "line": 251,
            "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "n",
                    "description": "non-negative number to square root",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "square root of number",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "src/math/math.js",
            "line": 14,
            "description": "Creates a new p5.Vector (the datatype for storing vectors). This provides a\ntwo or three dimensional vector, specifically a Euclidean (also known as \ngeometric) vector. A vector is an entity that has both magnitude and \ndirection.",
            "itemtype": "method",
            "name": "createVector",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/math/noise.js",
            "line": 54,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program).\nThe resulting value will always be between 0.0 and 1.0. p5.js can\ncompute 1D, 2D and 3D noise, depending on the number of coordinates\ngiven. The noise value can be animated by moving through the noise space\nas demonstrated in the example above. The 2nd and 3rd dimension can also\nbe interpreted as time.<br /><br />The actual noise is structured\nsimilar to an audio signal, in respect to the function's use of\nfrequencies. Similar to the concept of harmonics in physics, perlin\nnoise is computed over several octaves which are added together for the\nfinal result. <br /><br />Another way to adjust the character of the\nresulting sequence is the scale of the input coordinates. As the\nfunction works within an infinite space the value of the coordinates\ndoesn't matter as such, only the distance between successive coordinates\ndoes (eg. when using <b>noise()</b> within a loop). As a general rule\nthe smaller the difference between coordinates, the smoother the\nresulting noise sequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use.",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate in noise space",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>var xoff = 0.0;\n\nfunction draw() {\n  background(204);\n  xoff = xoff + .01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>\n<div>\n<code>var noiseScale=0.02;\n\nfunction draw() {\n  background(0);\n  for (var x=0; x < width; x++) {\n    var noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n    stroke(noiseVal*255);\n    line(x, mouseY+noiseVal*80, x, height);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "src/math/noise.js",
            "line": 196,
            "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overall intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence. By default, noise is\n computed over 4 octaves with each octave contributing exactly half than\n its predecessor, starting at 50% strength for the 1st octave. This\n falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n />By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "itemtype": "method",
            "name": "noiseDetail",
            "params": [
                {
                    "name": "lod",
                    "description": "number of octaves to be used by the noise",
                    "type": "Number"
                },
                {
                    "name": "falloff",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "example": [
                "\n <div>\n <code>\nvar noiseVal;\n var noiseScale=0.02;\nfunction setup() {\n   createCanvas(100,100);\n }\nfunction draw() {\n   background(0);\n   for (var y = 0; y < height; y++) {\n     for (var x = 0; x < width/2; x++) {\n       noiseDetail(2,0.2);\n       noiseVal = noise((mouseX+x) * noiseScale,\n                        (mouseY+y) * noiseScale);\n       stroke(noiseVal*255);\n       point(x,y);\n       noiseDetail(8,0.65);\n       noiseVal = noise((mouseX + x + width/2) * noiseScale,\n                        (mouseY + y) * noiseScale);\n       stroke(noiseVal*255);\n       point(x + width/2, y);\n     }\n   }\n }\n </code>\n </div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "src/math/noise.js",
            "line": 252,
            "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.",
            "itemtype": "method",
            "name": "noiseSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>var xoff = 0.0;\n\nfunction setup() {\n  noiseSeed(99);\n  stroke(0, 10);\n}\n\nfunction draw() {\n  xoff = xoff + .01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "src/math/random.js",
            "line": 46,
            "description": "Sets the seed value for random(). \n\nBy default, random() produces different results each time the program \nis run. Set the seed parameter to a constant to return the same \npseudo-random numbers each time the software is run.",
            "itemtype": "method",
            "name": "randomSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nrandomSeed(99);\nfor (var i=0; i < 100; i++) {\n  var r = random(0, 255);\n  stroke(r);\n  line(i, 0, i, 100);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "src/math/random.js",
            "line": 72,
            "description": "Return a random number.\n\nTakes either 0, 1 or 2 arguments.\nIf no argument is given, returns a random number between 0 and 1.\nIf one argument is given, returns a random number between 0 and the number.\nIf two arguments are given, returns a random number between them,\ninclusive.",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "min",
                    "description": "the lower bound",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the upper bound",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(50);\n  stroke(r*5);\n  line(50, i, 50+r, i);\n}\n</code>\n</div>\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(-50, 50);\n  line(50,i,50+r,i);\n}\n</code>\n</div>\n<div>\n<code>\n// Get a random element from an array\nvar words = [ \"apple\", \"bear\", \"cat\", \"dog\" ];\nvar index = floor(random(words.length));  // Convert to integer\ntext(words[index],10,50);  // Displays one of the four words\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "src/math/random.js",
            "line": 139,
            "description": "Returns a random number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <b>randomGaussian()</b> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.   \n Takes either 0, 1 or 2 arguments.\n If no args, returns a mean of 0 and standard deviation of 1\n If one arg, that arg is the mean (standard deviation is 1)\n If two args, first is mean, second is standard deviation",
            "itemtype": "method",
            "name": "randomGaussian",
            "params": [
                {
                    "name": "mean",
                    "description": "the mean",
                    "type": "Number"
                },
                {
                    "name": "sd",
                    "description": "the standard deviation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n <div>\n <code>for (var y = 0; y < 100; y++) {\n  var x = randomGaussian(50,15);\n  line(50, y, x, y);\n}\n </code>\n </div>\n <div>\n <code> \nvar distribution = new Array(360);\n \nfunction setup() {\n  createCanvas(100, 100);\n  for (var i = 0; i < distribution.length; i++) {\n    distribution[i] = floor(randomGaussian(0,15));\n  }\n}\n \nfunction draw() {\n  background(204);\n   \n  translate(width/2, width/2);\n \n  for (var i = 0; i < distribution.length; i++) {\n    rotate(TWO_PI/distribution.length);\n    stroke(0);\n    var dist = abs(distribution[i]);\n    line(0, 0, dist, 0);\n  }\n}\n </code>\n </div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 19,
            "description": "The inverse of cos(), returns the arc cosine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927).",
            "itemtype": "method",
            "name": "acos",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc cosine of the given value",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 36,
            "description": "The inverse of sin(), returns the arc sine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "asin",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc sine of the given value",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 53,
            "description": "The inverse of tan(), returns the arc tangent of a value. This function\nexpects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given value",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 70,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI. The atan2() function is most often used\nfor orienting geometry to the position of the cursor. Note: The\ny-coordinate of the point is the first parameter, and the x-coordinate is\nthe second parameter, due the the structure of calculating the tangent.",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "y-coordinate of the point",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given point",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 91,
            "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the cosine of the angle",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 107,
            "description": "Calculates the sine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the sine of the angle",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 123,
            "description": "Calculates the tangent of an angle. This function takes into account\nthe current angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent of the angle",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 139,
            "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964.",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radians value to convert to degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 153,
            "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964.",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree value to convert to radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 167,
            "description": "Sets the current mode of p5 to given mode.",
            "itemtype": "method",
            "name": "angleMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RADIANS or DEGREES",
                    "type": "Number/Constant"
                }
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 79,
            "description": "These Regular Expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases\nthe legibility and comprehensibility of the code",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 247,
            "description": "Regular expression for matching colors in format #XXX,\ne.g. #416",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 253,
            "description": "Regular expression for matching colors in format #XXXXXX,\ne.g. #b4d455",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 259,
            "description": "Regular expression for matching colors in format rgb(R, G, B),\ne.g. rgb(255, 0, 128)",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 275,
            "description": "Regular expression for matching colors in format rgb(R%, G%, B%),\ne.g. rgb(100%, 0%, 28.9%)",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 291,
            "description": "Regular expression for matching colors in format rgb(R, G, B, A),\ne.g. rgb(255, 0, 128, 0.25)",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 307,
            "description": "Regular expression for matching colors in format rgb(R%, G%, B%, A),\ne.g. rgb(100%, 0%, 28.9%. 0.5)",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Color.js",
            "line": 324,
            "description": "For a number of different inputs, returns a color formatted as\n[r, g, b, a].",
            "params": [
                {
                    "name": "args",
                    "description": "An 'array-like' object that represents a list of\n                         arguments",
                    "type": "Array-like"
                }
            ],
            "return": {
                "description": "a color formatted as [r, g, b, a]\n                         Example:\n                         input        ==> output\n                         g            ==> [g, g, g, 255]\n                         g,a          ==> [g, g, g, a]\n                         r, g, b      ==> [r, g, b, 255]\n                         r, g, b, a   ==> [r, g, b, a]\n                         [g]          ==> [g, g, g, 255]\n                         [g, a]       ==> [g, g, g, a]\n                         [r, g, b]    ==> [r, g, b, 255]\n                         [r, g, b, a] ==> [r, g, b, a]",
                "type": "Array"
            },
            "example": [
                "\n<div>\n<code>\n// todo\n</code>\n</div>"
            ],
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 25,
            "description": "Underlying HTML element. All normal HTML methods can be called on this.",
            "itemtype": "property",
            "name": "elt",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 37,
            "description": "Attaches the element to the parent specified. A way of setting\n the container for the element. Accepts either a string ID, DOM\n node, or p5.Element.",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "parent",
                    "description": "the ID, DOM node, or p5.Element\n                         of desired parent element",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // in the html file:\n &lt;div id=\"myContainer\">&lt;/div>\n // in the js file:\n var cnv = createCanvas(100, 100);\n cnv.parent(\"myContainer\");\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var div1 = createDiv('this is the child');\n div1.parent(div0); // use p5.Element\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n div0.id('apples');\n var div1 = createDiv('this is the child');\n div1.parent('apples'); // use id\n </code></div>\n <div class='norender'><code>\n var elt = document.getElementById('myParentDiv');\n var div1 = createDiv('this is the child');\n div1.parent(elt); // use element from page\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 82,
            "description": "Sets the ID of the element",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 95,
            "description": "Adds given class to the element",
            "itemtype": "method",
            "name": "class",
            "params": [
                {
                    "name": "class",
                    "description": "class to add",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 108,
            "description": "The .mousePressed() function is called once after every time a\nmouse button is pressed over the element. This can be used to\nattach element specific event listeners.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   pressed over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mousePressed(changeGray); // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any click anywhere\nfunction mousePressed() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"
            ],
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 153,
            "description": "The .mouseWheel() function is called once after every time a\nmouse wheel is scrolled over the element. This can be used to\nattach element specific event listeners.<br><br>\nThe event.wheelDelta or event.detail property returns negative values if\nthe mouse wheel if rotated up or away from the user and positive in the\nother direction. On OS X with \"natural\" scrolling enabled, the values are\nopposite.",
            "itemtype": "method",
            "name": "mouseWheel",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse wheel is\n                   scrolled over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 172,
            "description": "The .mouseReleased() function is called once after every time a\nmouse button is released over the element. This can be used to\nattach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseReleased",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   released over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 189,
            "description": "The .mouseClicked() function is called once after a mouse button is \npressed and released over the element. This can be used to\nattach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseClicked",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   clicked over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 204,
            "description": "The .mouseMoved() function is called once every time a\nmouse moves over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   moved over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 220,
            "description": "The .mouseOver() function is called once after every time a\nmouse moves onto the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   moved over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 235,
            "description": "The .mouseOut() function is called once after every time a\nmouse moves off the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOut",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   moved off the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 250,
            "description": "The .touchStarted() function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchStarted",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when touch is\n                   started over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchStarted(changeGray); // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchStarted() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"
            ],
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 294,
            "description": "The .touchMoved() function is called once after every time a touch move is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when touch is moved\n                   over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchMoved(changeGray); // attach listener for\n                              // canvas click only\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"
            ],
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 330,
            "description": "The .touchEnded() function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchEnded",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when touch is\n                   ended over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchEnded(changeGray);   // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchEnded() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"
            ],
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 376,
            "description": "The .dragOver() function is called once after every time a\nfile is dragged over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   dragged over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 391,
            "description": "The .dragLeave() function is called once after every time a\ndragged file leaves the element area. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragLeave",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   dragged over the element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 406,
            "description": "The .drop() function is called for each file dropped on the element.\nIt requires a callback that is passed a p5.File object.  You can \noptionally pass two callbacks, the first one (required) is triggered \nfor each file dropped when the file is loaded.  The second (optional)\nis triggered just once when a file (or files) are dropped.",
            "itemtype": "method",
            "name": "drop",
            "params": [
                {
                    "name": "callback",
                    "description": "triggered when files are dropped.",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "to receive loaded file.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.Element.js",
            "line": 494,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "src/objects/p5.File.js",
            "line": 24,
            "description": "Underlying File object. All normal File methods can be called on this.",
            "itemtype": "property",
            "name": "file",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Data"
        },
        {
            "file": "src/objects/p5.File.js",
            "line": 36,
            "description": "File type (image, text, etc.)",
            "itemtype": "property",
            "name": "type",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Data"
        },
        {
            "file": "src/objects/p5.File.js",
            "line": 42,
            "description": "File subtype (usually the file extension jpg, png, xml, etc.)",
            "itemtype": "property",
            "name": "subtype",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Data"
        },
        {
            "file": "src/objects/p5.File.js",
            "line": 48,
            "description": "File name",
            "itemtype": "property",
            "name": "name",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Data"
        },
        {
            "file": "src/objects/p5.File.js",
            "line": 54,
            "description": "File size",
            "itemtype": "property",
            "name": "size",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Data"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 10,
            "description": "This module defines the p5.Image class and P5 methods for\ndrawing images to the main display canvas.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 44,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 49,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 58,
            "description": "Array containing the color of every pixel in the image.\nThese values are numbers. This array is the size of the display window\nx 4, representing the R, G, B, A values in order for each pixel, moving \nfrom left to right across each row, then down each column. For example, \nif the image is 100x100 pixels, there will be 40000. The first four\nvalues (indices 0-3) in the array will be the R, G, B, A values of the\npixel at  (0, 0). The second four values (indices 4-7) will contain the\nR, G, B, A values of the pixel at (1, 0). More generally, to set values\nfor a pixel at (x, y):<br>\n<code>pixels[y*width+x] = r; <br>\npixels[y*width+x+1] = g;<br>\npixels[y*width+x+2] = b;<br>\npixels[y*width+x+3] = a;</code>\n<br><br>\nBefore accessing this array, the data must loaded with the loadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes.",
            "itemtype": "property",
            "name": "pixels[]",
            "example": [
                "\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102)); \n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n<div>\n<code>\nvar pink = color(255, 102, 204);\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < 4*(width*height/2); i+=4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i+1] = green(pink);\n  img.pixels[i+2] = blue(pink);\n  img.pixels[i+3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 110,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 118,
            "description": "Loads the pixels data for this image into the [pixels] attribute.",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 127,
            "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "y",
                    "description": "y-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "w",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "h",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 145,
            "description": "Get a region of pixels from an image.\n\nIf no params are passed, those whole image is returned,\nif x and y are the only params passed a single pixel is extracted\nif all params are passed a rectangle region is extracted and a p5.Image\nis returned.\n\nReturns undefined if the region is outside the bounds of the image",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format\n                                   [R, G, B, A] or p5.Image",
                "type": "Array/Color | p5.Image"
            },
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 167,
            "description": "Set the color of a single pixel or write an image into\nthis p5.Image.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling updatePixels().",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "grayscale value | pixel array |\n                               a p5.Color | image to copy",
                    "type": "Number|Array|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, i % img.width * 2)); \n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>"
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 200,
            "description": "Resize the image to a new width and height. To make the image scale\nproportionally, use 0 as the value for the wide or high parameter.\nFor instance, to make the width of an image 150 pixels, and change\nthe height using the same proportion, use resize(150, 0).",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the resized image width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the resized image height",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nvar img;\n\nfunction setup() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction draw() {\n  image(img, 0, 0);\n}\n\nfunction mousePressed() {\n  img.resize(50, 100);\n}\n</code></div>"
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 265,
            "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 287,
            "description": "Masks part of an image from displaying by loading another\nimage and using it's alpha channel as an alpha channel for\nthis image.",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image\n\nTODO: - Accept an array of alpha values.\n      - Use other channels of an image. p5 uses the\n      blue channel (which feels kind of arbitrary). Note: at the\n      moment this method does not match native processings original\n      functionality exactly.\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "p5.Image|undefined"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 332,
            "description": "Applies an image filter to a p5.Image",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "operation",
                    "description": "one of threshold, gray, invert, posterize and \n                          opaque see Filters.js for docs on each available\n                          filter",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 345,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode\n\nAvailable blend modes are: normal | multiply | screen | overlay | \n           darken | lighten | color-dodge | color-burn | hard-light | \n           soft-light | difference | exclusion | hue | saturation | \n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Integer"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Image.js",
            "line": 374,
            "description": "Saves the image to a file and force the browser to download it.\nAccepts two strings for filename and file extension\nSupports png (default) and jpg.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "filename",
                    "description": "give your file a name",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "'png' or 'jpg'",
                    "type": "String"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 13,
            "description": "Table Options\n<p>Generic class for handling tabular data, typically from a\nCSV, TSV, or other sort of spreadsheet file.</p>\n<p>CSV files are\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\ncomma separated values</a>, often with the data in quotes. TSV\nfiles use tabs as separators, and usually don't bother with the\nquotes.</p>\n<p>File names should end with .csv if they're comma separated.</p>\n<p>A rough \"spec\" for CSV can be found\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\n<p>To load files, use the loadTable method.</p>\n\nPossible options include:\n<ul>\n<li>csv - parse the table as comma-separated values\n<li>tsv - parse the table as tab-separated values\n<li>header - this table has a header (title) row\n</ul>",
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 46,
            "itemtype": "property",
            "name": "columns",
            "type": "{Array}",
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 52,
            "itemtype": "property",
            "name": "rows",
            "type": "{Array}",
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 59,
            "description": "Use addRow() to add a new row of data to a p5.Table object. By default,\nan empty row is created. Typically, you would store a reference to\nthe new row in a TableRow object (see newRow in the example above),\nand then set individual values using set().\n\nIf a p5.TableRow object is included as a parameter, then that row is\nduplicated and added to the table.",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "row",
                    "description": "row to be added to the table",
                    "type": "p5.TableRow",
                    "optional": true
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 84,
            "description": "Removes a row from the table object.",
            "itemtype": "method",
            "name": "removeRow",
            "params": [
                {
                    "name": "id",
                    "description": "ID number of the row to remove",
                    "type": "Number"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 98,
            "description": "Returns a reference to the specified p5.TableRow. The reference\ncan then be used to get and set values of the selected row.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "rowID",
                    "description": "ID number of the row to get",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "p5.TableRow object",
                "type": "TableRow"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 110,
            "description": "Gets all rows from the table. Returns an array of p5.TableRows.",
            "itemtype": "method",
            "name": "getRows",
            "return": {
                "description": "Array of p5.TableRows",
                "type": "Array"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 120,
            "description": "Finds the first row in the Table that contains the value\nprovided, and returns a reference to that row. Even if\nmultiple rows are possible matches, only the first matching\nrow is returned. The column to search may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "findRow",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "TableRow"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 154,
            "description": "Finds the rows in the Table that contain the value\nprovided, and returns references to those rows. Returns an\nArray, so for must be used to iterate through all the rows,\nas shown in the example above. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "findRows",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "Array"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 187,
            "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "matchRow",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or \n                                 title (string)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "TableRow object",
                "type": "TableRow"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 219,
            "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "matchRows",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or \n                                 title (string)",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "Array"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 253,
            "description": "Retrieves all values in the specified column, and returns them\nas an array. The column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "getColumn",
            "params": [
                {
                    "name": "column",
                    "description": "String or Number of the column to return",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Array of column values",
                "type": "Array"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 275,
            "description": "Removes all rows from a Table. While all rows are removed,\ncolumns and column titles are maintained.",
            "itemtype": "method",
            "name": "clearRows",
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 286,
            "description": "Use addColumn() to add a new column to a Table object.\nTypically, you will want to specify a title, so the column\nmay be easily referenced later by name. (If no title is\nspecified, the new column's title will be null.)",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "title",
                    "description": "title of the given column",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 300,
            "description": "Returns the total number of columns in a Table.",
            "return": {
                "description": "Number of columns in this table",
                "type": "Number"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 309,
            "description": "Returns the total number of rows in a Table.",
            "itemtype": "method",
            "name": "getRowCount",
            "return": {
                "description": "Number of rows in this table",
                "type": "Number"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 319,
            "description": "<p>Removes any of the specified characters (or \"tokens\").</p>\n\n<p>If no column is specified, then the values in all columns and\nrows are processed. A specific column may be referenced by\neither its ID or title.</p>",
            "itemtype": "method",
            "name": "removeTokens",
            "params": [
                {
                    "name": "chars",
                    "description": "String listing characters to be removed",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 370,
            "description": "Trims leading and trailing whitespace, such as spaces and tabs,\nfrom String table values. If no column is specified, then the\nvalues in all columns and rows are trimmed. A specific column\nmay be referenced by either its ID or title.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 412,
            "description": "Use removeColumn() to remove an existing column from a Table\nobject. The column to be removed may be identified by either\nits title (a String) or its index value (an int).\nremoveColumn(0) would remove the first column, removeColumn(1)\nwould remove the second column, and so on.",
            "itemtype": "method",
            "name": "removeColumn",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or ID (number)",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 451,
            "description": "Stores a value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified \nby either its ID or title.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 465,
            "description": "Stores a Float value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified \nby either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "Number"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 481,
            "description": "Stores a String value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified \nby either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String"
                }
            ],
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 496,
            "description": "Retrieves a value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by \neither its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 511,
            "description": "Retrieves a Float value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by \neither its ID or title.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Table.js",
            "line": 526,
            "description": "Retrieves a String value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by \neither its ID or title.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5.Table",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 43,
            "description": "Stores a value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "The value to be stored",
                    "type": "String|Number"
                }
            ],
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 79,
            "description": "Stores a Float value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a Float",
                    "type": "Number"
                }
            ],
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 95,
            "description": "Stores a String value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Number"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a String",
                    "type": "String"
                }
            ],
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 110,
            "description": "Retrieves a value from the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 127,
            "description": "Retrieves a Float value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Float Floating point number",
                "type": "Number"
            },
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.TableRow.js",
            "line": 151,
            "description": "Retrieves an String value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "String",
                "type": "String"
            },
            "class": "p5.TableRow",
            "module": "Data",
            "submodule": "Table"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 64,
            "description": "The x component of the vector",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 70,
            "description": "The y component of the vector",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 76,
            "description": "The z component of the vector",
            "itemtype": "property",
            "name": "z",
            "type": "{Number}",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 85,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a p5.Vector, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector or a\n                                    p5.Vector or an Array",
                    "type": "Number|p5.Vector|Array",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n   var v = createVector(1,2,3);\n   v.set(4,5,6); //Sets vector to [4,5,6]\n\n   var v1 = createVector(0,0,0);\n   var arr = [1,2,3]\n   v1.set(arr); //Sets vector to [1,2,3]\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 127,
            "description": "Gets a copy of the vector, returns a p5.Vector object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "the copy of the p5.Vector object",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 141,
            "description": "Adds x, y, and z components to a vector, adds one vector to another, or\nadds two independent vectors together. The version of the method that adds\ntwo vectors together is a static method and returns a p5.Vector, the others\nacts directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to be\n                                     added or a p5.Vector or an Array",
                    "type": "Number|p5.Vector|Array"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to be\n                                     added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to be\n                                     added",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5.Vector object.",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.add(4,5,6); // v's compnents are set to [5,7,9]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nvar v3 = p5.Vector.add(v1, v2); // v3 has components [3,5,7]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 192,
            "description": "Subtracts x, y, and z components from a vector, subtracts one vector from\nanother, or subtracts two independent vectors. The version of the method\nthat subtracts two vectors is a static method and returns a p5.Vector, the\nother acts directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "sub",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector or a\n                                     p5.Vector or an Array",
                    "type": "Number|p5.Vector|Array"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "p5.Vector object.",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(4, 5, 6);\nv.sub(1, 1, 1); // v's compnents are set to [3,4,5]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(2, 3, 4);\nvar v2 = createVector(1, 2, 3);\n\nvar v3 = p5.Vector.sub(v1, v2); // v3 has compnents [1,1,1]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 241,
            "description": "Multiply the vector by a scalar. The static version of this method\ncreates a new p5.Vector while the non static version acts on the vector\ndirectly. See the examples for more context.",
            "itemtype": "method",
            "name": "mult",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "the number to multiply with the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a reference to the p5.Vector object (allow chaining)",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.mult(2); // v's compnents are set to [2,4,6]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1  = createVector(1, 2, 3);\nvar v2 = p5.Vector.mult(v1, 2); // v2 has compnents [2,4,6]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 272,
            "description": "Divide the vector by a scalar. The static version of this method creates a\nnew p5.Vector while the non static version acts on the vector directly.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "div",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "the number to divide the vector by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a reference to the p5.Vector object (allow chaining)",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(6, 4, 2);\nv.div(2); //v's compnents are set to [3,2,1]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1  = createVector(6, 4, 2);\nvar v2 = p5.Vector.div(v, 2); // v2 has compnents [3,2,1]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 303,
            "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x*x + y*y + z*z).)",
            "itemtype": "method",
            "name": "mag",
            "return": {
                "description": "magnitude of the vector",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 314,
            "description": "Calculates the squared magnitude of the vector and returns the result\nas a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\nFaster if the real length is not required in the\ncase of comparing vectors, etc.",
            "itemtype": "method",
            "name": "magSq",
            "return": {
                "description": "squared magnitude of the vector",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 328,
            "description": "Calculates the dot product of two vectors. The version of the method\nthat computes the dot product of two independent vectors is a static\nmethod. See the examples for more context.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector or a p5.Vector",
                    "type": "Number|p5.Vector"
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nv1.dot(v2); // returns 20\n</code>\n</div>\n<div class=\"norender\">\n<code>\n//Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(3, 2, 1);\n\nvar dotProduct = p5.Vector.dot(v1, v2); // dotProduct is 10\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 367,
            "description": "Calculates and returns a vector composed of the cross product between\ntwo vectors. Both the static and non static methods return a new p5.Vector.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "p5.Vector to be crossed",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "p5.Vector composed of cross product",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(1, 2, 3);\n\nv1.cross(v2); // v's components are [0,0,0]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n//Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\n// crossProduct has components [0,0,1]\nvar crossProduct = p5.Vector.cross(v1,v2);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 406,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "v",
                    "description": "the x, y, and z coordinates of a p5.Vector",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = v.dist(v1); // distance is 1.4142...\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = p5.Vector.dist(v1,v2); //distance is 1.4142...\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 437,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "normalized p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 447,
            "description": "Limit the magnitude of this vector to the value used for the <b>max</b>\nparameter.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "max",
                    "description": "the maximum magnitude for the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 464,
            "description": "Set the magnitude of this vector to the value used for the <b>len</b>\nparameter.",
            "itemtype": "method",
            "name": "setMag",
            "params": [
                {
                    "name": "len",
                    "description": "the new length for this vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 476,
            "description": "Calculate the angle of rotation for this vector (only 2D vectors)",
            "itemtype": "method",
            "name": "heading",
            "return": {
                "description": "the angle of rotation",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 495,
            "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the\nsame",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 516,
            "description": "Linear interpolate the vector to another vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "x",
                    "description": "the x component or the p5.Vector to lerp to",
                    "type": "p5.Vector"
                },
                {
                    "name": "y",
                    "description": "y the y component",
                    "type": "p5.Vector",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z the z component",
                    "type": "p5.Vector",
                    "optional": true
                },
                {
                    "name": "amt",
                    "description": "the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.1 is very near\n                        the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified p5.Vector",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 1, 0);\n\nv.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n</code>\n</div>\n<div class=\"norender\">\n<code>\nvar v1 = createVector(0, 0, 0);\nvar v2 = createVector(100, 100, 0);\n\nvar v3 = p5.Vector.lerp(v1, v2, 0.5);\n// v3 has components [50,50,0]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 555,
            "description": "Return a representation of this vector as a float array. This is only\nfor temporary use. If used in any other fashion, the contents should be\ncopied by using the <b>p5.Vector.copy()</b> method to copy into your own\narray.",
            "itemtype": "method",
            "name": "array",
            "return": {
                "description": "an Array with the 3 values",
                "type": "Array"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 568,
            "description": "Equality check against a p5.Vector",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector or a\n                                    p5.Vector or an Array",
                    "type": "Number|p5.Vector|Array",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vectors are equals",
                "type": "Boolean"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 600,
            "description": "Make a new 2D unit vector from an angle",
            "itemtype": "method",
            "name": "fromAngle",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "the desired angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the new p5.Vector object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.fromAngle(PI / 2);\n//v has components [0,1,0]\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 628,
            "description": "Make a new 2D unit vector from a random angle",
            "itemtype": "method",
            "name": "random2D",
            "static": 1,
            "return": {
                "description": "the new p5.Vector object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random2D();\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 657,
            "description": "Make a new random 3D unit vector.",
            "itemtype": "method",
            "name": "random3D",
            "static": 1,
            "return": {
                "description": "the new p5.Vector object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random3D();\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 690,
            "description": "Adds two vectors together and returns a new one.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a p5.Vector to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a p5.Vector to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 710,
            "description": "Subtracts one p5.Vector from another and returns a new one.  The second\nvector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a p5.Vector to subtract from",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a p5.Vector to subtract",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 732,
            "description": "Multiplies a vector by a scalar and returns a new vector.",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the p5.Vector to multiply",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting new p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 751,
            "description": "Divides a vector by a scalar and returns a new vector.",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the p5.Vector to divide",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting new p5.Vector",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 771,
            "description": "Calculates the dot product of two vectors.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first p5.Vector",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second p5.Vector",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 783,
            "description": "Calculates the cross product of two vectors.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first p5.Vector",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second p5.Vector",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 795,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first p5.Vector",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second p5.Vector",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 808,
            "description": "Linear interpolate a vector to another vector and return the result as a\nnew vector.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a starting p5.Vector",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the p5.Vector to lerp to",
                    "type": "p5.Vector"
                },
                {
                    "name": "the",
                    "description": "amount of interpolation; some value between 0.0\n                      (old vector) and 1.0 (new vector). 0.1 is very near\n                      the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/objects/p5.Vector.js",
            "line": 829,
            "description": "Calculates and returns the angle (in radians) between two vectors.",
            "itemtype": "method",
            "name": "angleBetween",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the x, y, and z components of a p5.Vector",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the x, y, and z components of a p5.Vector",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the angle between (in radians)",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1,0,0);\nvar v2 = createVector(0,1,0);\n\nvar angle = p5.Vector.angleBetween(v1,v2);\n// angle is PI/2\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "src/output/files.js",
            "line": 99,
            "description": "<p>Save an image, text, json, csv, wav, or html. Prompts download to\nthe client's computer. <b>Note that it is not recommended to call save() \nwithin draw if it's looping, as the save() function will open a new save \ndialog every frame.</b></p>\n<p>The default behavior is to save the canvas as an image. You can\noptionally specify a filename. \nFor example:</p>\n<pre class='language-javascript'><code>\nsave();\nsave('myCanvas.jpg'); // save a specific canvas with a filename\n</code></pre>\n\n<p>Alternately, the first parameter can be a pointer to a canvas\np5.Element, an Array of Strings,\nan Array of JSON, a JSON object, a p5.Table, a p5.Image, or a\np5.SoundFile (requires p5.sound). The second parameter is a filename\n(including extension). The third parameter is for options specific\nto this type of object. This method will save a file that fits the\ngiven paramaters. For example:</p>\n \n<pre class='language-javascript'><code>\n\nsave('myCanvas.jpg');           // Saves canvas as an image\n\nvar cnv = createCanvas(100, 100);\nsave(cnv, 'myCanvas.jpg');      // Saves canvas as an image\n\nvar gb = createGraphics(100, 100);\nsave(gb, 'myGraphics.jpg');      // Saves p5.Graphics object as an image\n \nsave(myTable, 'myTable.html');  // Saves table as html file\nsave(myTable, 'myTable.csv',);  // Comma Separated Values\nsave(myTable, 'myTable.tsv');   // Tab Separated Values\n \nsave(myJSON, 'my.json');        // Saves pretty JSON\nsave(myJSON, 'my.json', true);  // Optimizes JSON filesize\n \nsave(img, 'my.png');            // Saves pImage as a png image\n\nsave(arrayOfStrings, 'my.txt'); // Saves strings to a text file with line\n                                // breaks after each item in the array\n</code></pre>",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "objectOrFilename",
                    "description": "If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).",
                    "type": "[Object|String]"
                },
                {
                    "name": "filename",
                    "description": "If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).",
                    "type": "[String]"
                },
                {
                    "name": "options",
                    "description": "Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.",
                    "type": "[Boolean/String]"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 219,
            "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Array|Object"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optimize",
                    "description": "If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar json;\n\nfunction setup() {\n\n  json = {}; // new JSON Object\n  \n  json.id = 0;\n  json.species = 'Panthera leo';\n  json.name = 'Lion';\n  \n// To save, un-comment the line below, then click 'run'\n// saveJSONObject(json, 'lion.json');\n}\n\n// Saves the following to a file called \"lion.json\":\n// {\n//   \"id\": 0,\n//   \"species\": \"Panthera leo\",\n//   \"name\": \"Lion\"\n// }\n</div></code>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 274,
            "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "params": [
                {
                    "name": "list",
                    "description": "string array to be written",
                    "type": "Array"
                },
                {
                    "name": "filename",
                    "description": "filename for output",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div><code>\nvar words = 'apple bear cat dog';\n\n// .split() outputs an Array\nvar list = split(words, ' ');\n\n// To save the file, un-comment next line and click 'run'\n// saveStrings(list, 'nouns.txt');\n\n// Saves the following to a file called 'nouns.txt':\n//\n// apple\n// bear\n// cat\n// dog\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 325,
            "description": "Writes the contents of a Table object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "params": [
                {
                    "name": "Table",
                    "description": "the Table object to save to a file",
                    "type": "p5.Table"
                },
                {
                    "name": "filename",
                    "description": "the filename to which the Table should be saved",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "can be one of \"tsv\", \"csv\", or \"html\"",
                    "type": "[String]"
                }
            ],
            "example": [
                "\n<div><code>\nvar table;\n\nfunction setup() {\n  table = new p5.Table();\n  \n  table.addColumn('id');\n  table.addColumn('species');\n  table.addColumn('name');\n  \n  var newRow = table.addRow();\n  newRow.setNum('id', table.getRowCount() - 1);\n  newRow.setString('species', 'Panthera leo');\n  newRow.setString('name', 'Lion');\n\n  // To save, un-comment next line then click 'run'\n  // saveTable(table, 'new.csv');\n  }\n  \n  // Saves the following to a file called 'new.csv':\n  // id,species,name\n  // 0,Panthera leo,Lion\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 453,
            "description": "Generate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by saveStrings, saveJSON, saveTable etc.",
            "params": [
                {
                    "name": "dataToDownload",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "[String]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 474,
            "description": "Forces download. Accepts a url to filedata/blob, a filename,\nand an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by saveStrings, saveJSON, saveTable etc.",
            "params": [
                {
                    "name": "href",
                    "description": "i.e. an href generated by createObjectURL",
                    "type": "String"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "[String]"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "[String]"
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 510,
            "description": "Returns a file extension, or another string\nif the provided parameter has no extension.",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[fileName, fileExtension]",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 542,
            "description": "Returns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/files.js",
            "line": 554,
            "description": "Helper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Data",
            "submodule": "Output"
        },
        {
            "file": "src/output/image.js",
            "line": 8,
            "description": "Save the current canvas as an image. In Safari, will open the\nimage in the window and the user must provide their own\nfilename on save-as. Other browsers will either save the\nfile immediately, or prompt the user with a dialogue window.",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "[String]"
                },
                {
                    "name": "extension",
                    "description": "'jpg' or 'png'",
                    "type": "[String]"
                },
                {
                    "name": "canvas",
                    "description": "a variable representing a\n                           specific html5 canvas (optional).",
                    "type": "[Canvas]"
                }
            ],
            "class": "p5",
            "module": "Data"
        },
        {
            "file": "src/output/image.js",
            "line": 70,
            "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will attempt to download\nall of the images that have just been created.",
            "params": [
                {
                    "name": "filename",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "extension",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "_duration",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "_fps",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "callback",
                    "description": "[description]",
                    "type": "[Function]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "p5",
            "module": "Data"
        },
        {
            "file": "src/output/text_area.js",
            "line": 19,
            "description": "The print() function writes to the console area of your browser, it maps\nto console.log(). This function is often helpful for looking at the data\na program is producing. This function creates a new line of text for\neach call to the function. More than one parameter can be passed into\nthe function by separating them with commas. Alternatively, individual\nelements can be separated with quotes (\"\") and joined with the addition\noperator (+).",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "contents",
                    "description": "any combination of Number, String, Object, Boolean,\n                      Array to print",
                    "type": "Any"
                }
            ],
            "class": "p5",
            "module": "Output",
            "submodule": "Text Area"
        },
        {
            "file": "src/rendering/rendering.js",
            "line": 12,
            "description": "Creates a canvas element in the document, and sets the dimensions of it\nin pixels. This method should be called only once at the start of setup.\nCalling createCanvas more than once in a sketch will result in very\nunpredicable behavior. If you want more than one drawing canvas\nyou could use createGraphics (hidden by default but it can be shown).<br>\nThe system variables width and height are set by the parameters passed\nto this function. If createCanvas() is not used, the window will be\ngiven a default size of 100x100 pixels.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "canvas generated",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 50);\n  background(153);\n  line(0, 0, width, height);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "src/rendering/rendering.js",
            "line": 68,
            "description": "Resizes the canvas to given width and height. Note that the\ncanvas will be cleared so anything drawn previously in setup\nor draw will disappear on resize. Setup will not be called\nagain.",
            "itemtype": "method",
            "name": "resizeCanvas",
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "src/rendering/rendering.js",
            "line": 100,
            "description": "Removes the default canvas for a p5 sketch that doesn't\nrequire a canvas",
            "itemtype": "method",
            "name": "noCanvas",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  noCanvas();\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "src/rendering/rendering.js",
            "line": 119,
            "description": "Creates and returns a new p5.Graphics object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels.",
            "itemtype": "method",
            "name": "createGraphics",
            "params": [
                {
                    "name": "w",
                    "description": "width of the offscreen graphics buffer",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the offscreen graphics buffer",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "offscreen graphics buffer",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nvar pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(100, 100);\n}\nfunction draw() {\n  background(200);\n  pg.background(100);\n  pg.noStroke();\n  pg.ellipse(pg.width/2, pg.height/2, 50, 50);\n  image(pg, 50, 50);\n  image(pg, 0, 0, 50, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "src/rendering/rendering.js",
            "line": 171,
            "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. This is the default blending mode.</li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values.</li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower.</li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh.\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks.</li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights.</li>\n</ul>",
            "itemtype": "method",
            "name": "blendMode",
            "params": [
                {
                    "name": "mode",
                    "description": "blend mode to set for canvas",
                    "type": "String/Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nblendMode(LIGHTEST);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>\n<div>\n<code>\nblendMode(MULTIPLY);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 23,
            "description": "Return a array of objects that represent bezier curves which approximate \nthe circular arc centered at the origin, from startAngle to endAngle \n(radians) with the specified radius.\n\nEach bezier curve is an object with four points, where x1,y1 and\nx4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's\ncontrol points.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 51,
            "description": "Cubic bezier approximation of a circular arc centered at the origin,\nfrom (radians) a1 to a2, where a2-a1 < pi/2.  The arc's radius is r.\n\nReturns an object with four points, where x1,y1 and x4,y4 are the arc's \nend points and x2,y2 and x3,y3 are the cubic bezier's control points.\n\nThis algorithm is based on the approach described in:\nA. Riškus, \"Approximation of a Cubic Bezier Curve by Circular Arcs and \nVice Versa,\" Information Technology and Control, 35(4), 2006 pp. 371-378.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 100,
            "description": "Draw an arc.\n\nIf a,b,c,d,start and stop are the only params provided, draws an\nopen pie.\n\nIf mode is provided draws the arc either open, chord or pie, dependent\non the variable provided.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "angle to start the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "angle to stop the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional parameter to determine the way of drawing\n                        the arc",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\narc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI+QUARTER_PI);\narc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, OPEN);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, CHORD);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, PIE);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 215,
            "description": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle. By default, the first two parameters set the location,\nand the third and fourth parameters set the shape's width and height. The\norigin may be changed with the ellipseMode() function.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the ellipse.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nellipse(56, 46, 55, 55);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 298,
            "description": "Draws a line (a direct path between two points) to the screen. The version\nof line() with four parameters draws the line in 2D. To color a line, use\nthe stroke() function. A line cannot be filled, therefore the fill()\nfunction will not affect the color of a line. 2D lines are drawn with a\nwidth of one pixel by default, but this can be changed with the\nstrokeWeight() function.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nline(30, 20, 85, 75);\n</code>\n</div>\n\n<div>\n<code>\nline(30, 20, 85, 20);\nstroke(126);\nline(85, 20, 85, 75);\nstroke(255);\nline(85, 75, 30, 75);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 345,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nvalue is the vertical value for the point.",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "x",
                    "description": "the x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\npoint(30, 20);\npoint(85, 20);\npoint(85, 75);\npoint(30, 75);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 397,
            "description": "Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape.",
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Type"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Type"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Type"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Type"
                },
                {
                    "name": "x3",
                    "description": "the x-coordinate of the third point",
                    "type": "Type"
                },
                {
                    "name": "y3",
                    "description": "the y-coordinate of the third point",
                    "type": "Type"
                },
                {
                    "name": "x4",
                    "description": "the x-coordinate of the fourth point",
                    "type": "Type"
                },
                {
                    "name": "y4",
                    "description": "the y-coordinate of the fourth point",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>   \nquad(38, 31, 86, 20, 69, 63, 30, 76);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 442,
            "description": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, however,\nmay be changed with the rectMode() function. If provided, the fifth, sixth\nseventh and eighth parameters, if specified, determine corner radius for\nthe top-right, top-left, lower-right and lower-left corners, respectively.\nAn omitted corner radius parameter is set to the value of the previously\nspecified radius value in the parameter list.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "tl",
                    "description": "optional radius of top-left corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tr",
                    "description": "optional radius of top-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "br",
                    "description": "optional radius of bottom-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bl",
                    "description": "optional radius of bottom-left corner.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object.",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\n// Draw a rectangle at location (30, 25) with a width and height of 55.\nrect(30, 20, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners, each having a radius of 20.\nrect(30, 20, 55, 55, 20);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners having the following radii:\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\nrect(30, 20, 55, 55, 20, 15, 10, 5)\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 548,
            "description": "A triangle is a plane created by connecting three points. The first two\narguments specify the first point, the middle two arguments specify the\nsecond point, and the last two arguments specify the third point.",
            "itemtype": "method",
            "name": "triangle",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate of the third point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntriangle(30, 75, 58, 20, 86, 75);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 18,
            "description": "Modifies the location from which ellipses are drawn by changing the way\nin which parameters given to ellipse() are interpreted.\n\nThe default mode is ellipseMode(CENTER), which interprets the first two\nparameters of ellipse() as the shape's center point, while the third and\nfourth parameters are its width and height.\n\nellipseMode(RADIUS) also uses the first two parameters of ellipse() as\nthe shape's center point, but uses the third and fourth parameters to\nspecify half of the shapes's width and height.\n\nellipseMode(CORNER) interprets the first two parameters of ellipse() as\nthe upper-left corner of the shape, while the third and fourth parameters\nare its width and height.\n\nellipseMode(CORNERS) interprets the first two parameters of ellipse() as\nthe location of one corner of the ellipse's bounding box, and the third\nand fourth parameters as the location of the opposite corner.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "ellipseMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CENTER, RADIUS, CORNER, or CORNERS",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nellipseMode(RADIUS);  // Set ellipseMode to RADIUS\nfill(255);  // Set fill to white\nellipse(50, 50, 30, 30);  // Draw white ellipse using RADIUS mode\n\nellipseMode(CENTER);  // Set ellipseMode to CENTER\nfill(100);  // Set fill to gray\nellipse(50, 50, 30, 30);  // Draw gray ellipse using CENTER mode\n</code>\n</div>\n\n<div>\n<code>\nellipseMode(CORNER);  // Set ellipseMode is CORNER\nfill(255);  // Set fill to white\nellipse(25, 25, 50, 50);  // Draw white ellipse using CORNER mode\n\nellipseMode(CORNERS);  // Set ellipseMode to CORNERS\nfill(100);  // Set fill to gray\nellipse(25, 25, 50, 50);  // Draw gray ellipse using CORNERS mode\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 80,
            "description": "Draws all geometry with jagged (aliased) edges. Note that smooth() is\nactive by default, so it is necessary to call noSmooth() to disable\nsmoothing of geometry, images, and fonts.",
            "itemtype": "method",
            "name": "noSmooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 106,
            "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to rect() are interpreted.\n\nThe default mode is rectMode(CORNER), which interprets the first two\nparameters of rect() as the upper-left corner of the shape, while the\nthird and fourth parameters are its width and height.\n\nrectMode(CORNERS) interprets the first two parameters of rect() as the\nlocation of one corner, and the third and fourth parameters as the\nlocation of the opposite corner.\n\nrectMode(CENTER) interprets the first two parameters of rect() as the\nshape's center point, while the third and fourth parameters are its\nwidth and height.\n\nrectMode(RADIUS) also uses the first two parameters of rect() as the\nshape's center point, but uses the third and fourth parameters to specify\nhalf of the shapes's width and height.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nrectMode(CORNER);  // Default rectMode is CORNER\nfill(255);  // Set fill to white\nrect(25, 25, 50, 50);  // Draw white rect using CORNER mode\n\nrectMode(CORNERS);  // Set rectMode to CORNERS\nfill(100);  // Set fill to gray\nrect(25, 25, 50, 50);  // Draw gray rect using CORNERS mode\n</code>\n</div>\n\n<div>\n<code>\nrectMode(RADIUS);  // Set rectMode to RADIUS\nfill(255);  // Set fill to white\nrect(50, 50, 30, 30);  // Draw white rect using RADIUS mode\n\nrectMode(CENTER);  // Set rectMode to CENTER\nfill(100);  // Set fill to gray\nrect(50, 50, 30, 30);  // Draw gray rect using CENTER mode\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 168,
            "description": "Draws all geometry with smooth (anti-aliased) edges. smooth() will also\nimprove image quality of resized images. Note that smooth() is active by\ndefault; noSmooth() can be used to disable smoothing of geometry,\nimages, and fonts.",
            "itemtype": "method",
            "name": "smooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 195,
            "description": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded, each of which specified with the corresponding\nparameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.",
            "itemtype": "method",
            "name": "strokeCap",
            "params": [
                {
                    "name": "cap",
                    "description": "either SQUARE, PROJECT, or ROUND",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nstrokeWeight(12.0);\nstrokeCap(ROUND);\nline(20, 30, 80, 30);\nstrokeCap(SQUARE);\nline(20, 50, 80, 50);\nstrokeCap(PROJECT);\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 226,
            "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled, or rounded and specified with the\ncorresponding parameters MITER, BEVEL, and ROUND. The default joint is\nMITER.",
            "itemtype": "method",
            "name": "strokeJoin",
            "params": [
                {
                    "name": "join",
                    "description": "either MITER, BEVEL, ROUND",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 285,
            "description": "Sets the width of the stroke used for lines, points, and the border\naround shapes. All widths are set in units of pixels.",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "the weight (in pixels) of the stroke",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\nstrokeWeight(1);  // Default\nline(20, 20, 80, 20);\nstrokeWeight(4);  // Thicker\nline(20, 40, 80, 40);\nstrokeWeight(10);  // Beastly\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "src/shape/curves.js",
            "line": 16,
            "description": "Draws a Bezier curve on the screen. These curves are defined by a series\nof anchor and control points. The first two parameters specify the first\nanchor point and the last two parameters specify the other anchor point.\nThe middle parameters specify the control points which define the shape\nof the curve. Bezier curves were developed by French engineer Pierre\nBezier.",
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the second anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\nline(85, 20, 10, 10);\nline(90, 90, 15, 80);\nstroke(0, 0, 0);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 58,
            "description": "Sets the resolution at which Beziers display.\n\nThe default value is 20.",
            "params": [
                {
                    "name": "detail",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nbackground(204);\nbezierDetail(50);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 79,
            "description": "Calculate a point on the Bezier Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
            "itemtype": "method",
            "name": "bezierPoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the value of the Bezier at point t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nfill(255);\nsteps = 10;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 120,
            "description": "Calculates the tangent of a point on a Bezier curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "itemtype": "method",
            "name": "bezierTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at point t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nsteps = 6;\nfill(255);\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  // Get the location of the point\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  // Get the tangent points\n  tx = bezierTangent(85, 10, 90, 15, t);\n  ty = bezierTangent(20, 10, 90, 80, t);\n  // Calculate an angle from the tangent points\n  a = atan2(ty, tx);\n  a += PI;\n  stroke(255, 102, 0);\n  line(x, y, cos(a)*30 + x, sin(a)*30 + y);\n  // The following line of code makes a line \n  // inverse of the above line\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n  stroke(0);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nstroke(255, 102, 0);\nsteps = 16;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  tx = bezierTangent(85, 10, 90, 15, t);\n  ty = bezierTangent(20, 10, 90, 80, t);\n  a = atan2(ty, tx);\n  a -= HALF_PI;\n  line(x, y, cos(a)*8 + x, sin(a)*8 + y);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 192,
            "description": "Draws a curved line on the screen. The first and second parameters specify\nthe beginning control point and the last two parameters specify the ending\ncontrol point. The middle parameters specify the start and stop of the\ncurve. Longer curves can be created by putting a series of curve() \nfunctions together or using curveVertex(). An additional function called\ncurveTightness() provides control for the visual quality of the curve.\nThe curve() function is an implementation of Catmull-Rom splines.",
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the ending control point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\nstroke(0); \ncurve(5, 26, 73, 24, 73, 61, 15, 65); \nstroke(255, 102, 0);\ncurve(73, 24, 73, 61, 15, 65, 15, 65);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 238,
            "description": "Sets the resolution at which curves display.\n\nThe default value is 20.",
            "params": [
                {
                    "name": "resolution",
                    "description": "of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nbackground(204);\ncurveDetail(20);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 259,
            "description": "Modifies the quality of forms created with curve() and curveVertex().\nThe parameter tightness determines how the curve fits to the vertex \npoints. The value 0.0 is the default value for tightness (this value\ndefines the curves to be Catmull-Rom splines) and the value 1.0 connects\nall the points with straight lines. Values within the range -5.0 and 5.0\nwill deform the curves but will leave them recognizable and as values \nincrease in magnitude, they will continue to deform.",
            "itemtype": "method",
            "name": "curveTightness",
            "params": [
                {
                    "name": "amount",
                    "description": "of deformation from the original vertices",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\n// Move the mouse left and right to see the curve change\n\nfunction setup() {\n  createCanvas(100, 100);\n  noFill();\n}\n\nfunction draw() {\n  background(204);\n  var t = map(mouseX, 0, width, -5, 5);\n  curveTightness(t);\n  beginShape();\n  curveVertex(10, 26);\n  curveVertex(10, 26);\n  curveVertex(83, 24);\n  curveVertex(83, 61);\n  curveVertex(25, 65); \n  curveVertex(25, 65);\n  endShape();\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 301,
            "description": "Calculate a point on the Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
            "itemtype": "method",
            "name": "curvePoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "bezier value at point t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nfill(255);\nellipseMode(CENTER);\nsteps = 6;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = curvePoint(5, 5, 73, 73, t);\n  y = curvePoint(26, 26, 24, 61, t);\n  ellipse(x, y, 5, 5);\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 348,
            "description": "Calculates the tangent of a point on a curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "itemtype": "method",
            "name": "curveTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at point t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 73, 24, 73, 61, 15, 65); \nsteps = 6;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  //ellipse(x, y, 5, 5);\n  tx = curveTangent(5, 73, 73, 15, t);\n  ty = curveTangent(26, 24, 61, 65, t);\n  a = atan2(ty, tx);\n  a -= PI/2.0;\n  line(x, y, cos(a)*8 + x, sin(a)*8 + y);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 35,
            "description": "Use the beginContour() and endContour() functions to create negative\nshapes within shapes such as the center of the letter 'O'. beginContour()\nbegins recording vertices for the shape and endContour() stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a beginShape()/endShape() pair and\ntransformations such as translate(), rotate(), and scale() do not work\nwithin a beginContour()/endContour() pair. It is also not possible to use\nother shapes, such as ellipse() or rect() within.",
            "itemtype": "method",
            "name": "beginContour",
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 79,
            "description": "Using the beginShape() and endShape() functions allow creating more\ncomplex forms. beginShape() begins recording vertices for a shape and\nendShape() stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon. The parameters\navailable for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN,\nTRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the beginShape()\nfunction, a series of vertex() commands must follow. To stop drawing the\nshape, call endShape(). Each shape will be outlined with the current\nstroke color and filled with the fill color.\n\nTransformations such as translate(), rotate(), and scale() do not work\nwithin beginShape(). It is also not possible to use other shapes, such as\nellipse() or rect() within beginShape().",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "kind",
                    "description": "either POINTS, LINES, TRIANGLES,\n                               TRIANGLE_FAN, TRIANGLE_STRIP, QUADS,\n                               or QUAD_STRIP",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\n// currently not working\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(LINES);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLES);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_STRIP);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nvertex(90, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_FAN);\nvertex(57.5, 50);\nvertex(57.5, 15);\nvertex(92, 50);\nvertex(57.5, 85);\nvertex(22, 50);\nvertex(57.5, 15);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUADS);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 75);\nvertex(50, 20);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 75);\nvertex(85, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUAD_STRIP);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 20);\nvertex(50, 75);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 20);\nvertex(85, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(20, 20);\nvertex(40, 20);\nvertex(40, 40);\nvertex(60, 40);\nvertex(60, 60);\nvertex(20, 60);\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 259,
            "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. The first time bezierVertex() is used within a\nbeginShape() call, it must be prefaced with a call to vertex()\nto set the first anchor point. This function must be used between\nbeginShape() and endShape() and only when there is no MODE\nparameter specified to beginShape().",
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nbezierVertex(50, 80, 60, 25, 30, 20);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 317,
            "description": "Specifies vertex coordinates for curves. This function may only\nbe used between beginShape() and endShape() and only when there\nis no MODE parameter specified to beginShape(). The first and\nlast points in a series of curveVertex() lines will be used to\nguide the beginning and end of a the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with curveVertex() will draw\nthe curve between the second, third, and fourth points. The\ncurveVertex() function is an implementation of Catmull-Rom\nsplines.",
            "itemtype": "method",
            "name": "curveVertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbeginShape();\ncurveVertex(84,  91);\ncurveVertex(84,  91);\ncurveVertex(68,  19);\ncurveVertex(21,  17);\ncurveVertex(32, 100);\ncurveVertex(32, 100);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 354,
            "description": "Use the beginContour() and endContour() functions to create negative\nshapes within shapes such as the center of the letter 'O'. beginContour()\nbegins recording vertices for the shape and endContour() stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a beginShape()/endShape() pair and\ntransformations such as translate(), rotate(), and scale() do not work\nwithin a beginContour()/endContour() pair. It is also not possible to use\nother shapes, such as ellipse() or rect() within.",
            "itemtype": "method",
            "name": "endContour",
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 405,
            "description": "The endShape() function is the companion to beginShape() and may only be\ncalled after beginShape(). When endshape() is called, all of image data\ndefined since the previous call to beginShape() is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endShape",
            "params": [
                {
                    "name": "mode",
                    "description": "use CLOSE to close the shape",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\n\nbeginShape();\nvertex(20, 20);\nvertex(45, 20);\nvertex(45, 80);\nendShape(CLOSE);\n\nbeginShape();\nvertex(50, 20);\nvertex(75, 20);\nvertex(75, 80);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 685,
            "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a beginShape() call, it\nmust be prefaced with a call to vertex() to set the first anchor point.\nThis function must be used between beginShape() and endShape() and only\nwhen there is no MODE parameter specified to beginShape().",
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "x-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nstrokeWeight(4);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(4);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nquadraticVertex(20, 80, 80, 80);\nvertex(80, 60);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 757,
            "description": "All shapes are constructed by connecting a series of vertices. vertex()\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the beginShape() and\nendShape() functions.",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "src/structure/structure.js",
            "line": 16,
            "description": "<p>Stops p5.js from continuously executing the code within draw(). \nIf loop() is called, the code in draw() begins to run continuously again. \nIf using noLoop() in setup(), it should be the last line inside the block.\n</p>\n\n<p>When noLoop() is used, it's not possible to manipulate or access the\nscreen inside event handling functions such as mousePressed() or\nkeyPressed(). Instead, use those functions to call redraw() or loop(),\nwhich will run draw(), which can update the screen properly. This means\nthat when noLoop() has been called, no drawing can happen, and functions\nlike saveFrame() or loadPixels() may not be used.</p>\n\n<p>Note that if the sketch is resized, redraw() will be called to update \nthe sketch, even after noLoop() has been specified. Otherwise, the sketch\nwould enter an odd state until loop() was called.</p>",
            "itemtype": "method",
            "name": "noLoop",
            "example": [
                "\n<div><code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  noLoop();\n}\n\nfunction draw() {\n  line(10, 10, 90, 90);\n}\n</code></div>\n\n<div><code>\nvar x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height); \n}\n\nfunction mousePressed() {\n  noLoop();\n}\n\nfunction mouseReleased() {\n  loop();\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 77,
            "description": "By default, p5.js loops through draw() continuously, executing the code\nwithin it. However, the draw() loop may be stopped by calling noLoop().\nIn that case, the draw() loop can be resumed with loop().",
            "itemtype": "method",
            "name": "loop",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 89,
            "description": "The push() function saves the current drawing style settings and \ntransformations, while pop() restores these settings. Note that these \nfunctions are always used together. They allow you to change the style \nand transformation settings and later return to what you had. When a new \nstate is started with push(), it builds on the current style and transform\ninformation. The push() and pop() functions can be embedded to provide \nmore control. (See the second example for a demonstration.)\n<br><br>\npush() stores information related to the current transformation state\nand style settings controlled by the following functions: fill(), \nstroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), \nimageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), \ntextFont(), textMode(), textSize(), textLeading().",
            "itemtype": "method",
            "name": "push",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\ntranslate(50, 0);\nellipse(0, 50, 33, 33);  // Middle circle\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);  // Left-middle circle\n\npush();  // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);  // Right-middle circle\npop();  // Restore previous state\n\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 157,
            "description": "The push() function saves the current drawing style settings and \ntransformations, while pop() restores these settings. Note that these \nfunctions are always used together. They allow you to change the style \nand transformation settings and later return to what you had. When a new \nstate is started with push(), it builds on the current style and transform\ninformation. The push() and pop() functions can be embedded to provide \nmore control. (See the second example for a demonstration.)\n<br><br>\npush() stores information related to the current transformation state\nand style settings controlled by the following functions: fill(), \nstroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), \nimageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), \ntextFont(), textMode(), textSize(), textLeading().",
            "itemtype": "method",
            "name": "pop",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\ntranslate(50, 0);\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(0, 50, 33, 33);  // Middle circle\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);  // Left-middle circle\n\npush();  // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);  // Right-middle circle\npop();  // Restore previous state\n\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 232,
            "description": "Executes the code within draw() one time. This functions allows the\n program to update the display window only when necessary, for example\n when an event registered by mousePressed() or keyPressed() occurs. \nIn structuring a program, it only makes sense to call redraw() within\n events such as mousePressed(). This is because redraw() does not run\n draw() immediately (it only sets a flag that indicates an update is\n needed).\n \n The redraw() function does not work properly when called inside draw().\n To enable/disable animations, use loop() and noLoop().",
            "itemtype": "method",
            "name": "redraw",
            "example": [
                "\n   <div><code>\n     var x = 0;\n    function setup() {\n       createCanvas(200, 200);\n       noLoop();\n     }\n    function draw() {\n       background(204);\n       line(x, 0, x, height); \n     }\n    function mousePressed() {\n       x += 1;\n       redraw();\n     }\n   </code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "src/transform/transform.js",
            "line": 18,
            "description": "Multiplies the current matrix by the one specified through the parameters.\nThis is very slow because it will try to calculate the inverse of the\ntransform, so avoid it whenever possible.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "n00",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n01",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n02",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n10",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n11",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n12",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\n// Example in the works. \n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 55,
            "description": "Replaces the current matrix with the identity matrix.",
            "itemtype": "method",
            "name": "resetMatrix",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\n// Example in the works.\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 72,
            "description": "Rotates a shape the amount specified by the angle parameter. This\nfunction accounts for angleMode, so angles can be entered in either\nRADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when draw() begins again.\n\nTechnically, rotate() multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe push() and pop().",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(width/2, height/2);\nrotate(PI/3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 119,
            "description": "Increases or decreases the size of a shape by expanding and contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If scale() is called\nwithin draw(), the transformation is reset when the loop begins again.\n\nUsing this fuction with the z parameter requires using P3D as a\nparameter for size(), as shown in the third example above. This function\ncan be further controlled with push() and pop().",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "percentage to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "percentage to scale the object in the y-axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(width/2, height/2);\nrotate(PI/3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>\n\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5, 1.3);\nrect(30, 20, 50, 50);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 171,
            "description": "Shears a shape around the x-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf shearX() is called within the draw(), the transformation is reset when\nthe loop begins again.\n\nTechnically, shearX() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npush() and pop() functions.",
            "itemtype": "method",
            "name": "shearX",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(width/4, height/4);\nshearX(PI/4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 208,
            "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\nshearY() is called within the draw(), the transformation is reset when\nthe loop begins again.\n\nTechnically, shearY() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npush() and pop() functions.",
            "itemtype": "method",
            "name": "shearY",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(width/4, height/4);\nshearY(PI/4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 245,
            "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If translate() is called within draw(), the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using push() and pop().",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "left/right translation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "up/down translation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "example": [
                "\n<div>\n<code>\ntranslate(30, 20);\nrect(0, 0, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\nrect(0, 0, 55, 55);  // Draw rect at original 0,0\ntranslate(30, 20);\nrect(0, 0, 55, 55);  // Draw rect at new 0,0\ntranslate(14, 14);\nrect(0, 0, 55, 55);  // Draw rect at new 0,0\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 22,
            "description": "Sets the current alignment for drawing text. The parameters LEFT, CENTER,\nand RIGHT set the display characteristics of the letters in relation to\nthe values for the x and y parameters of the text() function.",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "h",
                    "description": "horizontal alignment, either LEFT,\n                           CENTER, or RIGHT",
                    "type": "Number/Constant"
                },
                {
                    "name": "v",
                    "description": "vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE",
                    "type": "Number/Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\ntextSize(16);\ntextAlign(RIGHT);\ntext(\"ABCD\", 50, 30);\ntextAlign(CENTER);\ntext(\"EFGH\", 50, 50);\ntextAlign(LEFT);\ntext(\"IJKL\", 50, 70);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 59,
            "description": "Sets the spacing between lines of text in units of pixels. This\nsetting will be used in all subsequent calls to the text() function.",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "l",
                    "description": "the size in pixels for spacing between lines",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Text to display. The \"\\n\" is a \"new line\" character\nlines = \"L1\\nL2\\nL3\";\ntextSize(12);\nfill(0);  // Set fill to black\n\ntextLeading(10);  // Set leading to 10\ntext(lines, 10, 25);\n\ntextLeading(20);  // Set leading to 20\ntext(lines, 40, 25);\n\ntextLeading(30);  // Set leading to 30\ntext(lines, 70, 25);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 88,
            "description": "Sets the current font size. This size will be used in all subsequent\ncalls to the text() function. Font size is measured in units of pixels.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "s",
                    "description": "the size of the letters in units of pixels",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nbackground(0);\nfill(255);\ntextSize(26); \ntext(\"WORD\", 10, 50); \ntextSize(14);\ntext(\"WORD\", 10, 70);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 112,
            "description": "Sets the style of the text to NORMAL, ITALIC, or BOLD. Note this is\noverridden by CSS styling.",
            "itemtype": "method",
            "name": "textStyle",
            "params": [
                {
                    "name": "s",
                    "description": "styling for text, either NORMAL,\n                           ITALIC, or BOLD",
                    "type": "Number/Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nbackground(0);\nfill(255);\ntextStyle(NORMAL);\ntextSize(14);\ntext(\"WORD\", 10, 23);\ntextStyle(ITALIC);\ntextSize(14);\ntext(\"WORD\", 10, 45);\ntextStyle(BOLD);\ntextSize(14);\ntext(\"WORD\", 10, 67);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 145,
            "description": "Calculates and returns the width of any character or text string.",
            "itemtype": "method",
            "name": "textWidth",
            "params": [
                {
                    "name": "s",
                    "description": "the String of characters to measure",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div>\n<code>\nbackground(0);\nfill(255);\ntextSize(14);\ns = \"String.\";\ntext(s, 10, 23);\nconsole.log(textWidth(s));\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 166,
            "description": "Returns ascent of the current font at its current size.",
            "example": [
                "\n<div>\n<code>\nvar base = height * 0.75;\nvar scalar = 0.8; // Different for each font\n\ntextSize(32);  // Set initial text size\nvar a = textAscent() * scalar;  // Calc ascent\nline(0, base-a, width, base-a);\ntext(\"dp\", 0, base);  // Draw text on baseline\n\ntextSize(64);  // Increase text size\na = textAscent() * scalar;  // Recalc ascent\nline(40, base-a, width, base-a);\ntext(\"dp\", 40, base);  // Draw text on baseline\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 191,
            "description": "Returns descent of the current font at its current size.",
            "example": [
                "\n<div>\n<code>\nvar base = height * 0.75;\nvar scalar = 0.8; // Different for each font\n\ntextSize(32);  // Set initial text size\nvar a = textDescent() * scalar;  // Calc ascent\nline(0, base+a, width, base+a);\ntext(\"dp\", 0, base);  // Draw text on baseline\n\ntextSize(64);  // Increase text size\na = textDescent() * scalar;  // Recalc ascent\nline(40, base+a, width, base+a);\ntext(\"dp\", 40, base);  // Draw text on baseline\n</code>\n</div> "
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 216,
            "description": "Helper fxn to apply text properties.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 227,
            "description": "Helper fxn to measure ascent and descent. \nAdapted from http://stackoverflow.com/a/25355178",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 268,
            "description": "Helper fxn to measure ascent and descent. \nAdapted from http://stackoverflow.com/a/25355178",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "src/typography/loading_displaying.js",
            "line": 12,
            "description": "Draws text to the screen. Displays the information specified in the first\nparameter on the screen in the position specified by the additional\nparameters. A default font will be used unless a font is set with the\ntextFont() function and a default size will be used unless a font is set\nwith textSize(). Change the color of the text with the fill() function.\nChange the outline of the text with the stroke() and strokeWeight() \nfunctions.\nThe text displays in relation to the textAlign() function, which gives the\noption to draw to the left, right, and center of the coordinates.\n\nThe x2 and y2 parameters define a rectangular area to display within and\nmay only be used with string data. When these parameters are specified,\nthey are interpreted based on the current rectMode() setting. Text that\ndoes not fit completely within the rectangle specified will not be drawn\nto the screen.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "str",
                    "description": "the alphanumeric symbols to be displayed",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "by default, the width of the text box,\n                    see rectMode() for more info",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "by default, the height of the text box,\n                    see rectMode() for more info",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\ntextSize(32);\ntext(\"word\", 10, 30); \nfill(0, 102, 153);\ntext(\"word\", 10, 60);\nfill(0, 102, 153, 51);\ntext(\"word\", 10, 90); \n</code>\n</div>\n<div>\n<code>\ns = \"The quick brown fox jumped over the lazy dog.\";\nfill(50);\ntext(s, 10, 10, 70, 80); // Text wraps within text box\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/typography/loading_displaying.js",
            "line": 105,
            "description": "Sets the current font that will be drawn with the text() function.",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "str",
                    "description": "name of font",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfill(0);\ntextSize(36);\ntextFont(\"Georgia\");\ntext(\"Georgia\", 12, 40);\ntextFont(\"Helvetica\");\ntext(\"Helvetica\", 12, 90);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "src/utils/color_utils.js",
            "line": 1,
            "description": "module Utils\nsubmodule Color Utils",
            "class": "p5",
            "module": "Typography"
        },
        {
            "file": "src/utils/color_utils.js",
            "line": 11,
            "description": "For a color expressed as an HSBA array, return the corresponding RGBA value",
            "params": [
                {
                    "name": "hsba",
                    "description": "An 'array' object that represents a list of\n                         HSB colors on a scale of 0-255",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of RGBA values, on a scale of 0-255",
                "type": "Array"
            },
            "class": "p5",
            "module": "Typography"
        },
        {
            "file": "src/utils/color_utils.js",
            "line": 79,
            "description": "For a color expressed as an RGBA array, return the corresponding HSBA value",
            "params": [
                {
                    "name": "rgba",
                    "description": "An 'array' object that represents a list of\n                         RGB colors on a scale of 0-255",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of HSB values, on a scale of 0-255",
                "type": "Array"
            },
            "class": "p5",
            "module": "Typography"
        },
        {
            "file": "src/var/canvas.js",
            "line": 1,
            "requires": [
                "constants"
            ],
            "class": "p5.dom",
            "module": "Typography"
        },
        {
            "file": "src/app.js",
            "line": 52,
            "description": "_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5.dom",
            "module": "Typography"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 40,
            "description": "Searches the page for an element with given ID and returns it as\na p5.Element. The DOM node itself can be accessed with .elt.\nReturns null if none found.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "id",
                    "description": "id of element to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "p5.Element containing node found",
                "type": "Object/p5.Element|Null"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 58,
            "description": "Searches the page for elements with given class and returns an\narray of p5.Elements. The DOM nodes themselves can be accessed\nwith .elt. Returns an empty array if none found.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "class",
                    "description": "class name of elements to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of p5.Element wrapped nodes found",
                "type": "Array"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 79,
            "description": "Helper function for getElement and getElements.",
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 90,
            "description": "Removes all elements created by p5, except any canvas / graphics\nelements created by createCanvas or createGraphics.\nEvent handlers are removed, and element is removed from the DOM.",
            "itemtype": "method",
            "name": "removeElements",
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  createCanvas(100, 100);\n  createDiv('this is some text');\n  createP('this is a paragraph');\n}\nfunction mousePressed() {\n  removeElements(); // this will remove the div and p, not canvas\n}\n</code></div>\n"
            ],
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 116,
            "description": "Helpers for create methods.",
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 127,
            "description": "Creates a &lt;div&gt;&lt;/div&gt; element in the DOM with given inner HTML.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createDiv",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 138,
            "description": "Creates a &lt;p&gt;&lt;/p&gt; element in the DOM with given inner HTML. Used\nfor paragraph length text.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createP",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 150,
            "description": "Creates a &lt;span&gt;&lt;/span&gt; element in the DOM with given inner HTML.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createSpan",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 170,
            "description": "Creates an &lt;img /&gt; element in the DOM with given src and\nalternate text.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createImg",
            "params": [
                {
                    "name": "src",
                    "description": "src path or url for image",
                    "type": "String"
                },
                {
                    "name": "alt",
                    "description": "alternate text to be used if image does not\n                 load",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 193,
            "description": "Creates an &lt;a&gt;&lt;/a&gt; element in the DOM for including a hyperlink.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createA",
            "params": [
                {
                    "name": "href",
                    "description": "url of page to link to",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "inner html of link element to display",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target where new link should open,\n                            could be _blank, _self, _parent, _top.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 214,
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 217,
            "description": "Creates a slider &lt;input&gt;&lt;/input&gt; element in the DOM.\nUse .size() to set the display length of the slider.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createSlider",
            "params": [
                {
                    "name": "min",
                    "description": "minimum value of the slider",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "maximum value of the slider",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "default value of the slider",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 240,
            "description": "Creates a &lt;button&gt;&lt;/button&gt; element in the DOM.\nUse .size() to set the display size of the button.\nUse .mousePressed() to specify behavior on press.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createButton",
            "params": [
                {
                    "name": "label",
                    "description": "label displayed on the button",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of the button",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 261,
            "description": "Creates an &lt;input&gt;&lt;/input&gt; element in the DOM for text input.\nUse .size() to set the display length of the box.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createInput",
            "params": [
                {
                    "name": "value",
                    "description": "default value of the input box",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 279,
            "description": "Creates an &lt;input&gt;&lt;/input&gt; element in the DOM of type 'file'.  \nThis allows users to select local files for use in a sketch.",
            "itemtype": "method",
            "name": "createFileInput",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function for when a file loaded",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "multiple",
                    "description": "optional to allow multiple files selected",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created DOM element",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 343,
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 372,
            "description": "Creates an HTML5 &lt;video&gt; element in the DOM for simple playback\nof audio/video. Shown by default, can be hidden with .hide()\nand drawn into canvas using video(). Appends to the container\nnode if one is specified, otherwise appends to body. The first parameter\ncan be either a single string path to a video file, or an array of string\npaths to different formats of the same video. This is useful for ensuring\nthat your video can play across different browsers, as each supports\ndifferent formats. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\npage for further information about supported formats.",
            "itemtype": "method",
            "name": "createVideo",
            "params": [
                {
                    "name": "src",
                    "description": "path to a video file, or array of paths for\n                            supporting different browsers",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to video p5.Element",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 398,
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 400,
            "description": "Creates a hidden HTML5 &lt;audio&gt; element in the DOM for simple audio\nplayback. Appends to the container node if one is specified,\notherwise appends to body. The first parameter\ncan be either a single string path to a audio file, or an array of string\npaths to different formats of the same audio. This is useful for ensuring\nthat your audio can play across different browsers, as each supports\ndifferent formats. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\npage for further information about supported formats.",
            "itemtype": "method",
            "name": "createAudio",
            "params": [
                {
                    "name": "src",
                    "description": "path to an audio file, or array of paths for\n                            supporting different browsers",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to audio p5.Element",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 426,
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 436,
            "description": "Creates a new &lt;video&gt; element that contains the audio/video feed\nfrom a webcam. This can be drawn onto the canvas using video(). More\nspecific properties of the stream can be passing in a Constraints object.\nSee the \n<a href=\"http://w3c.github.io/mediacapture-main/getusermedia.html\">W3C \nspec</a> for possible properties. Note that not all of these are supported\nby all browsers.",
            "itemtype": "method",
            "name": "createCapture",
            "params": [
                {
                    "name": "type",
                    "description": "type of capture, either VIDEO or\n                                   AUDIO if none specified, default both,\n                                   or a Constraints boject",
                    "type": "String/Constant|Object"
                },
                {
                    "name": "callback",
                    "description": "function to be called once\n                                   stream has loaded",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "capture video p5.Element",
                "type": "Object/p5.Element"
            },
            "example": [
                "\n<div><class='norender'><code>\nvar capture;\n\nfunction setup() {\n  createCanvas(480, 120);\n  capture = createCapture(VIDEO);\n}\n\nfunction draw() {\n  image(capture, 0, 0, width, width*capture.height/capture.width);\n  filter(INVERT);\n}\n</code></div>\n<div><class='norender'><code>\nfunction setup() {\n  createCanvas(480, 120);\n  var constraints = {\n    video: {\n      mandatory: {\n        minWidth: 1280,\n        minHeight: 720\n      },\n      optional: [\n        { maxFrameRate: 10 }\n      ]\n    },\n    audio: true\n  };\n  createCapture(constraints, function(stream) {\n    console.log(stream);\n  });\n}\n</code></div>"
            ],
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 532,
            "description": "Creates element with given tag in the DOM with given content.\nAppends to the container node if one is specified, otherwise\nappends to body.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tag",
                    "description": "tag for the new element",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "html content to be inserted into the element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to p5.Element holding created\n                          node",
                "type": "Object/p5.Element"
            },
            "class": "p5.dom",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 555,
            "description": "Adds specified class to the element.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "class",
                    "description": "name of class to add",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 577,
            "description": "Removes specified class from the element.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "class",
                    "description": "name of class to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 592,
            "description": "Attaches the element  as a child to the parent specified.\n Accepts either a string ID, DOM node, or p5.Element",
            "itemtype": "method",
            "name": "child",
            "params": [
                {
                    "name": "child",
                    "description": "the ID, DOM node, or p5.Element\n                         to add to the current element",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var div1 = createDiv('this is the child');\n div0.child(div1); // use p5.Element\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var div1 = createDiv('this is the child');\n div1.id('apples');\n div0.child('apples'); // use id\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var elt = document.getElementById('myChildDiv');\n div0.child(elt); // use element from page\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 630,
            "description": "If an argument is given, sets the inner HTML of the element,\n replacing any existing html. If no arguments are given, returns\n the inner HTML of the element.",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "html",
                    "description": "the HTML to be placed inside the element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element|String"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 650,
            "description": "Sets the position of the element relative to (0, 0) of the\n window. Essentially, sets position:absolute and left and top\n properties of style.",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "x",
                    "description": "x-position relative to upper left of window",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position relative to upper left of window",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n <div><code class='norender'>\n function setup() {\n   var cnv = createCanvas(100, 100);\n   // positions canvas 50px to right and 100px\n   // below upper left corner of the window\n   cnv.position(50, 100);\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 677,
            "description": "Sets the given style (css) property of the element with the given value.\n If no value is specified, returns the value of the given property,\n or undefined if the property is not.",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "property",
                    "description": "property to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to property",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "value of property, if no value is specified\n                             or p5.Element",
                "type": "String|p5.Element"
            },
            "example": [
                "\n <div><code class=\"norender\">\n var myDiv = createDiv(\"I like pandas.\");\n myDiv.style(\"color\", \"#ff0000\");\n myDiv.style(\"font-size\", \"18px\");\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 712,
            "description": "Adds a new attribute or changes the value of an existing attribute\n on the specified element. If no value is specified, returns the\n value of the given attribute, or null if attribute is not set.",
            "itemtype": "method",
            "name": "attribute",
            "params": [
                {
                    "name": "attr",
                    "description": "attribute to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to attribute",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "value of attribute, if no value is\n                             specified or p5.Element",
                "type": "String|p5.Element"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n var myDiv = createDiv(\"I like pandas.\");\nmyDiv.attribute(\"align\", \"center\");\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 739,
            "description": "Either returns the value of the element if no arguments\ngiven, or sets the value of the element.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "value of element, if no value is\n                            specified or p5.Element",
                "type": "String|p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 760,
            "description": "Shows the current element. Essentially, setting display:block for the style.",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 772,
            "description": "Hides the current element. Essentially, setting display:none for the style.",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 783,
            "description": "Sets the width and height of the element. AUTO can be used to\n only adjust one dimension.",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "w",
                    "description": "width of the element",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the element",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 837,
            "description": "Removes the element and deregisters all listeners.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nvar myDiv = createDiv('this is some text');\nmyDiv.remove();\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 883,
            "description": "Play an HTML5 media element.",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 897,
            "description": "Stops an HTML5 media element (sets current time to zero).",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 909,
            "description": "Pauses an HTML5 media element.",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 920,
            "description": "Set 'loop' to true for an HTML5 media element, and starts playing.",
            "itemtype": "method",
            "name": "loop",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 931,
            "description": "Set 'loop' to false for an HTML5 media element. Element will stop\nwhen it reaches the end.",
            "itemtype": "method",
            "name": "noLoop",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 944,
            "description": "Set HTML5 media element to autoplay or not.",
            "itemtype": "method",
            "name": "autoplay",
            "params": [
                {
                    "name": "autoplay",
                    "description": "whether the element should autoplay",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 956,
            "description": "Sets volume for this HTML5 media element. If no argument is given,\nreturns the current volume.",
            "params": [
                {
                    "name": "val",
                    "description": "volume between 0.0 and 1.0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "current volume or p5.MediaElement",
                "type": "Number|p5.MediaElement"
            },
            "itemtype": "method",
            "name": "volume",
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 972,
            "description": "If no arguments are given, returns the current time of the elmeent.\nIf an argument is given the current time of the element is set to it.",
            "itemtype": "method",
            "name": "time",
            "params": [
                {
                    "name": "time",
                    "description": "time to jump to (in seconds)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "current time (in seconds)\n                                 or p5.MediaElement",
                "type": "Number|p5.MediaElement"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 989,
            "description": "Returns the duration of the HTML5 media element.",
            "itemtype": "method",
            "name": "duration",
            "return": {
                "description": "duration",
                "type": "Number"
            },
            "class": "p5.MediaElement",
            "module": "p5.dom",
            "submodule": "p5.dom"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 53,
            "description": "p5.sound developed by Jason Sigal for the Processing Foundation, Google Summer of Code 2014. The MIT License (MIT).\n\nhttp://github.com/therewasaguy/p5.sound\n\nSome of the many audio libraries & resources that inspire p5.sound:\n - TONE.js (c) Yotam Mann, 2014. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\n - buzz.js (c) Jay Salvat, 2013. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\n \n Web Audio API: http://w3.org/TR/webaudio/",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 71,
            "description": "Web Audio SHIMS and helper functions to ensure compatability across browsers",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 78,
            "description": "<p>Returns the Audio Context for this sketch. Useful for users\nwho would like to dig deeper into the <a target='_blank' href=\n'http://webaudio.github.io/web-audio-api/'>Web Audio API\n</a>.</p>",
            "itemtype": "method",
            "name": "getAudioContext",
            "return": {
                "description": "AudioContext for this sketch",
                "type": "Object"
            },
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 114,
            "description": "Determine which filetypes are supported (inspired by buzz.js)\nThe audio element (el) will only be used to test browser support for various audio formats",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 172,
            "description": "Master contains AudioContext and the master sound output.",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 205,
            "description": "p5.soundOut is the p5.sound master output. It sends output to\nthe destination of this window's web audio context. It contains \nWeb Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>),\nand Gain Nodes for <code>.input</code> and <code>.output</code>.",
            "itemtype": "property",
            "name": "p5.soundOut",
            "type": "{Object}",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 215,
            "description": "a silent connection to the DesinationNode\nwhich will ensure that anything connected to it\nwill not be garbage collected",
            "access": "private",
            "tagname": "",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 231,
            "description": "<p>Set the master amplitude (volume) for sound in this sketch.</p>\n\n<p>Note that values greater than 1.0 may lead to digital distortion.</p>\n \n<p><b>How This Works</b>: When you load the p5.sound module, it\ncreates a single instance of p5sound. All sound objects in this\nmodule output to p5sound before reaching your computer's output.\nSo if you change the amplitude of p5sound, it impacts all of the\nsound in this module.</p>",
            "itemtype": "method",
            "name": "masterVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "Master amplitude (volume) for sound in\n                         this sketch. Should be between 0.0\n                         (silence) and 1.0. Values greater than\n                         1.0 may lead to digital distortion.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nmasterVolume(.5);\n</code></div>\n "
            ],
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 256,
            "description": "Returns a number representing the sample rate, in samples per second,\nof all sound objects in this audio context. It is determined by the\nsampling rate of your operating system's sound card, and it is not\ncurrently possile to change.\nIt is often 44100, or twice the range of human hearing.",
            "itemtype": "method",
            "name": "sampleRate",
            "return": {
                "description": "samplerate samples per second",
                "type": "Number"
            },
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 272,
            "description": "Returns the closest MIDI note value for\na given frequency.",
            "params": [
                {
                    "name": "frequency",
                    "description": "A freqeuncy, for example, the \"A\"\n                           above Middle C is 440Hz",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "MIDI note value",
                "type": "Number"
            },
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 285,
            "description": "Returns the frequency value of a MIDI note value.\nGeneral MIDI treats notes as integers where middle C\nis 60, C# is 61, D is 62 etc. Useful for generating\nmusical frequencies with oscillators.",
            "itemtype": "method",
            "name": "midiToFreq",
            "params": [
                {
                    "name": "midiNote",
                    "description": "The number of a MIDI note",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Frequency value of the given MIDI note",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nvar notes = [60, 64, 67, 72];\nvar i = 0;\n\nfunction setup() {\n  osc = new p5.Oscillator('Triangle');\n  osc.start();\n  frameRate(1);\n}\n\nfunction draw() {\n  var freq = midiToFreq(notes[i]);\n  osc.freq(freq);\n  i++;\n  if (i >= notes.length){\n    i = 0;\n  }\n}\n</code></div>"
            ],
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 318,
            "description": "List the SoundFile formats that you will include. LoadSound \nwill search your directory for these extensions, and will pick\na format that is compatable with the client's web browser.\n<a href=\"http://media.io/\">Here</a> is a free online file\nconverter.",
            "itemtype": "method",
            "name": "soundFormats",
            "params": [
                {
                    "name": "formats",
                    "description": "i.e. 'mp3', 'wav', 'ogg'",
                    "type": "String|Strings"
                }
            ],
            "example": [
                "\n<div><code>\nfunction preload() {\n  // set the global sound formats\n  soundFormats('mp3', 'ogg');\n  \n  // load either beatbox.mp3, or .ogg, depending on browser\n  mySound = loadSound('../sounds/beatbox.mp3');\n}\n\nfunction setup() {\n  mySound.play();\n}\n</code></div>"
            ],
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 432,
            "description": "Used by Osc and Env to chain signal math",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 615,
            "description": "loadSound() returns a new p5.SoundFile from a specified\npath. If called during preload(), the p5.SoundFile will be ready\nto play in time for setup() and draw(). If called outside of\npreload, the p5.SoundFile will not be ready immediately, so\nloadSound accepts a callback as the second parameter. Using a\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">\nlocal server</a> is recommended when loading external files.",
            "itemtype": "method",
            "name": "loadSound",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3']",
                    "type": "String/Array"
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call while file is loading.\n                               This function will receive a percentage from 0.0\n                               to 1.0.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a p5.SoundFile",
                "type": "SoundFile"
            },
            "example": [
                " \n<div><code>\nfunction preload() {\n mySound = loadSound('assets/doorbell.mp3');\n}\n\nfunction setup() {\n  mySound.play();\n}\n</code></div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 652,
            "description": "This is a helper function that the p5.SoundFile calls to load\nitself. Accepts a callback (the name of another function)\nas an optional parameter.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 690,
            "description": "Returns true if the sound file finished loading successfully.",
            "itemtype": "method",
            "name": "isLoaded",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 703,
            "description": "Play the p5.SoundFile",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule playback to start (in seconds from now).",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rate",
                    "description": "(optional) playback rate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "amp",
                    "description": "(optional) amplitude (volume)\n                                    of playback",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueStart",
                    "description": "(optional) cue start time in seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueEnd",
                    "description": "(optional) cue end time in seconds",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 802,
            "description": "p5.SoundFile has two play modes: <code>restart</code> and\n<code>sustain</code>. Play Mode determines what happens to a\np5.SoundFile if it is triggered while in the middle of playback.\nIn sustain mode, playback will continue simultaneous to the\nnew playback. In restart mode, play() will stop playback\nand start over. Sustain is the default mode.",
            "itemtype": "method",
            "name": "playMode",
            "params": [
                {
                    "name": "str",
                    "description": "'restart' or 'sustain'",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div><code>\nfunction setup(){\n  mySound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\nfunction mouseClicked() {\n  mySound.playMode('sustain');\n  mySound.play();\n}\nfunction keyPressed() {\n  mySound.playMode('restart');\n  mySound.play();\n}\n \n </code></div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 844,
            "description": "Pauses a file that is currently playing. If the file is not\nplaying, then nothing will happen.\n\nAfter pausing, .play() will resume from the paused\nposition.\nIf p5.SoundFile had been set to loop before it was paused,\nit will continue to loop after it is unpaused with .play().",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                             seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar soundFile;\n\nfunction preload() {\n  soundFormats('ogg', 'mp3');\n  soundFile = loadSound('../_files/Damscray_-_Dancing_Tiger_02');\n}\nfunction setup() {\n  background(0, 255, 0);\n  soundFile.loop();\n}\nfunction keyTyped() {\n  if (key == 'p') {\n    soundFile.pause();\n    background(255, 0, 0);\n  }\n}\n\nfunction keyReleased() {\n  if (key == 'p') {\n    soundFile.play();\n    background(0, 255, 0);\n  }\n</code>\n</div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 898,
            "description": "Loop the p5.SoundFile. Accepts optional parameters to set the\nplayback rate, playback volume, loopStart, loopEnd.",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                            seconds from now",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rate",
                    "description": "(optional) playback rate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "amp",
                    "description": "(optional) playback volume",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueLoopStart",
                    "description": "startTime in seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueLoopEnd",
                    "description": "(optional) endTime in seconds",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 914,
            "description": "Set a p5.SoundFile's looping flag to true or false. If the sound\nis currently playing, this change will take effect when it\nreaches the end of the current playback.",
            "params": [
                {
                    "name": "Boolean",
                    "description": "set looping to true or false",
                    "type": "Boolean"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 934,
            "description": "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 948,
            "description": "Returns true if a p5.SoundFile is playing, false if not (i.e.\npaused or stopped).",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 958,
            "description": "Returns true if a p5.SoundFile is paused, false if not (i.e.\nplaying or stopped).",
            "itemtype": "method",
            "name": "isPaused",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 968,
            "description": "Stop soundfile playback.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                            in seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 991,
            "description": "Stop playback on all of this soundfile's sources.",
            "access": "private",
            "tagname": "",
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1009,
            "description": "Multiply the output volume (amplitude) of a sound file\nbetween 0.0 (silence) and 1.0 (full volume).\n1.0 is the maximum amplitude of a digital sound, so multiplying\nby greater than 1.0 may cause digital distortion. To\nfade, provide a <code>rampTime</code> parameter. For more\ncomplex fades, see the Env class.\n\nAlternately, you can pass in a signal source such as an\noscillator to modulate the amplitude with an audio signal.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "Fade for t seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "Schedule this event to happen at\n                               t seconds in the future",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1050,
            "description": "Set the stereo panning of a p5.sound object to\na floating point number between -1.0 (left) and 1.0 (right).\nDefault is 0.0 (center).",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panValue",
                    "description": "Set the stereo panner",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                               seconds from now",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\n\n var ball = {};\n var soundFile;\n\n function setup() {\n   soundFormats('ogg', 'mp3');\n   soundFile = loadSound('assets/beatbox.mp3');\n }\n \n function draw() {\n   background(0);\n   ball.x = constrain(mouseX, 0, width);\n   ellipse(ball.x, height/2, 20, 20)\n }\n \n function mousePressed(){\n   // map the ball's x location to a panning degree \n   // between -1.0 (left) and 1.0 (right)\n   var panning = map(ball.x, 0., width,-1.0, 1.0);\n   soundFile.pan(panning);\n   soundFile.play();\n }\n </div></code>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1089,
            "description": "Returns the current stereo pan position (-1.0 to 1.0)",
            "return": {
                "description": "Returns the stereo pan setting of the Oscillator\n                         as a number between -1.0 (left) and 1.0 (right).\n                         0.0 is center and default.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1099,
            "description": "Set the playback rate of a sound file. Will change the speed and the pitch.\nValues less than zero will reverse the audio buffer.",
            "itemtype": "method",
            "name": "rate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Must be greater than zero.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar song;\n\nfunction preload() {\n  song = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  song.loop();\n}\n\nfunction draw() {\n  background(200);\n  \n  // Set the rate to a range between 0.1 and 4\n  // Changing the rate also alters the pitch\n  var speed = map(mouseY, 0.1, height, 0, 2);\n  speed = constrain(speed, 0.01, 4);\n  song.rate(speed);\n  \n  // Draw a circle to show what is going on\n  stroke(0);\n  fill(51, 100);\n  ellipse(mouseX, 100, 48, 48);\n}\n\n </code>\n </div>\n"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1171,
            "description": "Returns the duration of a sound file in seconds.",
            "itemtype": "method",
            "name": "duration",
            "return": {
                "description": "The duration of the soundFile in seconds.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1185,
            "description": "Return the current position of the p5.SoundFile playhead, in seconds.\nNote that if you change the playbackRate while the p5.SoundFile is\nplaying, the results may not be accurate.",
            "itemtype": "method",
            "name": "currentTime",
            "return": {
                "description": "currentTime of the soundFile in seconds.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1201,
            "description": "Move the playhead of the song to a position, in seconds. Start\nand Stop time. If none are given, will reset the file to play\nentire duration from start to finish.",
            "itemtype": "method",
            "name": "jump",
            "params": [
                {
                    "name": "cueTime",
                    "description": "cueTime of the soundFile in seconds.",
                    "type": "Number"
                },
                {
                    "name": "endTime",
                    "description": "endTime of the soundFile in seconds.",
                    "type": "Number"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1225,
            "description": "Return the number of channels in a sound file.\nFor example, Mono = 1, Stereo = 2.",
            "itemtype": "method",
            "name": "channels",
            "return": {
                "description": "[channels]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1235,
            "description": "Return the sample rate of the sound file.",
            "itemtype": "method",
            "name": "sampleRate",
            "return": {
                "description": "[sampleRate]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1244,
            "description": "Return the number of samples in a sound file.\nEqual to sampleRate * duration.",
            "itemtype": "method",
            "name": "frames",
            "return": {
                "description": "[sampleCount]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1254,
            "description": "Returns an array of amplitude peaks in a p5.SoundFile that can be\nused to draw a static waveform. Scans through the p5.SoundFile's\naudio buffer to find the greatest amplitudes. Accepts one\nparameter, 'length', which determines size of the array.\nLarger arrays result in more precise waveform visualizations.\n\nInspired by Wavesurfer.js.",
            "itemtype": "method",
            "name": "getPeaks",
            "params": [
                {
                    "name": "length",
                    "description": "length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of peaks.",
                "type": "Float32Array"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1306,
            "description": "Reverses the p5.SoundFile's buffer source.\nPlayback must be handled separately (see example).",
            "itemtype": "method",
            "name": "reverseBuffer",
            "example": [
                "\n<div><code>\nvar drum;\n\nfunction preload() {\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  drum.reverseBuffer();\n  drum.play();\n}\n\n </code>\n </div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1373,
            "description": "Connects the output of a p5sound object to input of another\np5.sound object. For example, you may connect a p5.SoundFile to an\nFFT or an Effect. If no parameter is given, it will connect to\nthe master output. Most p5sound objects connect to the master\noutput when they are created.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "object",
                    "description": "Audio object that accepts an input",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1394,
            "description": "Disconnects the output of this p5sound object.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1402,
            "description": "Read the Amplitude (volume level) of a p5.SoundFile. The\np5.SoundFile class contains its own instance of the Amplitude\nclass to help make it easy to get a SoundFile's volume level.\nAccepts an optional smoothing value (0.0 < 1.0).",
            "itemtype": "method",
            "name": "getLevel",
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smoothing is 0.0 by default.\n                             Smooths values based on previous values.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Volume level (between 0.0 and 1.0)",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1419,
            "description": "Reset the source for this SoundFile to a\nnew path (URL).",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "path to audio file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1432,
            "description": "Replace the current Audio Buffer with a new Buffer.",
            "params": [
                {
                    "name": "buf",
                    "description": "Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.",
                    "type": "Array"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1571,
            "description": "Connects to the p5sound instance (master output) by default.\nOptionally, you can pass in a specific source (i.e. a soundfile).",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "snd",
                    "description": "set the sound source\n                                     (optional, defaults to\n                                     master output)",
                    "type": "SoundObject|undefined",
                    "optional": true
                },
                {
                    "name": "smoothing",
                    "description": "a range between 0.0 and 1.0\n                                      to smooth amplitude readings",
                    "type": "Number|undefined",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound1 = loadSound('assets/beat.mp3');\n  sound2 = loadSound('assets/drum.mp3');\n}\nfunction setup(){\n  amplitude = new p5.Amplitude();\n  sound1.play();\n  sound2.play();\n  amplitude.setInput(sound2);\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\nfunction mouseClicked(){\n  sound1.stop();\n  sound2.stop();\n}\n</code></div>"
            ],
            "class": "p5.Amplitude",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1676,
            "description": "Returns a single Amplitude reading at the moment it is called.\nFor continuous readings, run in the draw loop.",
            "itemtype": "property",
            "name": "[channel] Optionally return only channel 0 (left) or 1 (right)",
            "type": "Number",
            "return": {
                "description": "Amplitude as a number between 0.0 and 1.0",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound = loadSound('assets/beat.mp3');\n}\nfunction setup() { \n  amplitude = new p5.Amplitude();\n  sound.play();\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\nfunction mouseClicked(){\n  sound.stop();\n}\n</code></div>"
            ],
            "class": "p5.Amplitude",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1717,
            "description": "Determines whether the results of Amplitude.process() will be\nNormalized. To normalize, Amplitude finds the difference the\nloudest reading it has processed and the maximum amplitude of\n1.0. Amplitude adds this difference to all values to produce\nresults that will reliably map between 0.0 and 1.0. However,\nif a louder moment occurs, the amount that Normalize adds to\nall the values will change. Accepts an optional boolean parameter\n(true or false). Normalizing is off by default.",
            "itemtype": "method",
            "name": "toggleNormalize",
            "params": [
                {
                    "name": "boolean",
                    "description": "set normalize to true (1) or false (0)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "p5.Amplitude",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1737,
            "description": "Smooth Amplitude analysis by averaging with the last analysis \nframe. Off by default.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "set",
                    "description": "smoothing from 0.0 <= 1",
                    "type": "Number"
                }
            ],
            "class": "p5.Amplitude",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1870,
            "description": "Set the input source for the FFT analysis. If no source is\nprovided, FFT will analyze all sound in the sketch.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "source",
                    "description": "p5.sound object (or web audio API source node)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bins",
                    "description": "Must be a power of two between 16 and 1024",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1888,
            "description": "Returns an array of amplitude values (between 0-255) that represent\na snapshot of amplitude readings in a single buffer. Length will be\nequal to bins (defaults to 1024). Can be used to draw the waveform\nof a sound.",
            "itemtype": "method",
            "name": "waveform",
            "params": [
                {
                    "name": "bins",
                    "description": "Must be a power of two between\n                          16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array    Array of amplitude values (0-255)\n                          over time. Array length = bins.",
                "type": "Array"
            },
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1911,
            "description": "Returns an array of amplitude values (between 0 and 255)\nacross the frequency spectrum. Length is equal to FFT bins\n(1024 by default). The array indices correspond to frequencies\n(i.e. pitches), from the lowest to the highest that humans can\nhear. Each value represents amplitude at that slice of the\nfrequency spectrum. Must be called prior to using\n<code>getEnergy()</code>.",
            "itemtype": "method",
            "name": "analyze",
            "params": [
                {
                    "name": "bins",
                    "description": "Must be a power of two between\n                           16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "spectrum    Array of energy (amplitude/volume)\n                            values across the frequency spectrum.\n                            Lowest energy (silence) = 0, highest\n                            possible is 255.",
                "type": "Array"
            },
            "example": [
                "\n<div><code>\nvar osc;\nvar fft;\n\nfunction setup(){\n  createCanvas(100,100);\n  osc = new p5.Oscillator();\n  osc.start();\n  fft = new p5.FFT();\n}\n\nfunction draw(){\n  background(0);\n\n  var freq = map(mouseX, 0, 800, 20, 15000);\n  freq = constrain(freq, 1, 20000);\n  osc.freq(freq);\n\n  var spectrum = fft.analyze(); \n  noStroke();\n  fill(0,255,0); // spectrum is green\n  for (var i = 0; i< spectrum.length; i++){\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width / spectrum.length, h )\n  }\n\n  stroke(255);\n  text('Freq: ' + round(freq)+'Hz', 10, 10); \n}\n</code></div>\n                                 \n"
            ],
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 1972,
            "description": "Returns the amount of energy (volume) at a specific\n<a href=\"en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\">\nfrequency</a>, or the average amount of energy between two\nfrequencies. Accepts Number(s) corresponding\nto frequency (in Hz), or a String corresponding to predefined\nfrequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\").\nReturns a range between 0 (no energy/volume at that frequency) and\n255 (maximum energy). \n<em>NOTE: analyze() must be called prior to getEnergy(). Analyze()\ntells the FFT to analyze frequency data, and getEnergy() uses\nthe results determine the value at a specific frequency or\nrange of frequencies.</em></p>",
            "itemtype": "method",
            "name": "getEnergy",
            "params": [
                {
                    "name": "frequency1",
                    "description": "Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings \"bass\", \"lowMid\" \"mid\",\n                              \"highMid\", and \"treble\" will return\n                              predefined frequency ranges.",
                    "type": "Number|String"
                },
                {
                    "name": "frequency2",
                    "description": "If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Energy   Energy (volume/amplitude) from\n                            0 and 255.",
                "type": "Number"
            },
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2052,
            "description": "Smooth FFT analysis by averaging with the last analysis frame.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "smoothing",
                    "description": "0.0 < smoothing < 1.0.\n                             Defaults to 0.8.",
                    "type": "Number"
                }
            ],
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2063,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2350,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2370,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2418,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2544,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2575,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2596,
            "class": "p5.FFT",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2687,
            "description": "Fade to value, for smooth transitions",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set this signal",
                    "type": "Number"
                },
                {
                    "name": "secondsFromNow",
                    "description": "Length of fade, in seconds from now",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Signal",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2698,
            "description": "Connect a p5.sound object or Web Audio node to this\np5.Signal so that its amplitude values can be scaled.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Signal",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2711,
            "description": "Add a constant value to this audio signal,\nand return the resulting audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalAdd.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "p5.SignalAdd"
            },
            "class": "p5.Signal",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2730,
            "description": "Multiply this signal by a constant value,\nand return the resulting audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalMult.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "Tone.Multiply"
            },
            "class": "p5.Signal",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2749,
            "description": "Scale this signal value to a given range,\nand return the result as an audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalScale.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "number",
                    "description": "to multiply",
                    "type": "Number"
                },
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "p5.SignalScale"
            },
            "class": "p5.Signal",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2850,
            "description": "Start an oscillator. Accepts an optional parameter to\ndetermine how long (in seconds from now) until the\noscillator starts.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "time",
                    "description": "startTime in seconds from now.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "frequency",
                    "description": "frequency in Hz.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2885,
            "description": "Stop an oscillator. Accepts an optional parameter\nto determine how long (in seconds from now) until the\noscillator stops.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "secondsFromNow",
                    "description": "Time, in seconds from now.",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2901,
            "description": "Set the amplitude between 0 and 1.0. Or, pass in an object\nsuch as an oscillator to modulate amplitude with an audio signal.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "vol",
                    "description": "between 0 and 1.0\n                            or a modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "gain  If no value is provided,\n                            returns the Web Audio API\n                            AudioParam that controls\n                            this oscillator's\n                            gain/amplitude/volume)",
                "type": "AudioParam"
            },
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2940,
            "description": "Set frequency of an oscillator to a value. Or, pass in an object\nsuch as an oscillator to modulate the frequency with an audio signal.",
            "itemtype": "method",
            "name": "freq",
            "params": [
                {
                    "name": "Frequency",
                    "description": "Frequency in Hz\n                                      or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "Ramp time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "Schedule this event to happen\n                                 at x seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Frequency If no value is provided,\n                                returns the Web Audio API\n                                AudioParam that controls\n                                this oscillator's frequency",
                "type": "AudioParam"
            },
            "example": [
                "\n<div><code>\nvar osc = new p5.Oscillator(300);\nosc.start();\nosc.freq(40, 10);\n</code></div>"
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 2991,
            "description": "Set type to 'sine', 'triangle', 'sawtooth' or 'square'.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'sine', 'triangle', 'sawtooth' or 'square'.",
                    "type": "String"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3003,
            "description": "Connect to a p5.sound / Web Audio object.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound or Web Audio object",
                    "type": "Object"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3020,
            "description": "Disconnect all outputs",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3031,
            "description": "Pan between Left (-1) and Right (1)",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panning",
                    "description": "Number between -1 and 1",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3061,
            "description": "Set the phase of an oscillator between 0.0 and 1.0",
            "itemtype": "method",
            "name": "phase",
            "params": [
                {
                    "name": "phase",
                    "description": "float between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3111,
            "description": "Add a value to the p5.Oscillator's output amplitude,\nand return the oscillator. Calling this method again\nwill override the initial add() with a new value.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with scaled output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3128,
            "description": "Multiply the p5.Oscillator's output amplitude\nby a fixed value (i.e. turn it up!). Calling this method\nagain will override the initial mult() with a new value.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with multiplied output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3144,
            "description": "Scale this oscillator's amplitude values to a given\nrange, and return the oscillator. Calling this method\nagain will override the initial scale() with new values.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with scaled output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3174,
            "description": "Constructor: <code>new p5.SinOsc()</code>.\nThis creates a Sine Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('sine')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('sine')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SinOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3189,
            "description": "Constructor: <code>new p5.TriOsc()</code>.\nThis creates a Triangle Wave Oscillator and is\nequivalent to <code>new p5.Oscillator('triangle')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('triangle')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.TriOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3204,
            "description": "Constructor: <code>new p5.SawOsc()</code>.\nThis creates a SawTooth Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('sawtooth')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('sawtooth')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SawOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3219,
            "description": "Constructor: <code>new p5.SqrOsc()</code>.\nThis creates a Square Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('square')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('square')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SqrOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3296,
            "itemtype": "property",
            "name": "attackTime",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3300,
            "itemtype": "property",
            "name": "attackLevel",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3304,
            "itemtype": "property",
            "name": "decayTime",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3308,
            "itemtype": "property",
            "name": "decayLevel",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3312,
            "itemtype": "property",
            "name": "sustainTime",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3316,
            "itemtype": "property",
            "name": "sustainLevel",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3320,
            "itemtype": "property",
            "name": "releaseTime",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3324,
            "itemtype": "property",
            "name": "releaseLevel",
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3338,
            "description": "Reset the envelope with a series of time/value pairs.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "aTime",
                    "description": "Time (in seconds) before level\n                               reaches attackLevel",
                    "type": "Number"
                },
                {
                    "name": "aLevel",
                    "description": "Typically an amplitude between\n                               0.0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "dTime",
                    "description": "Time",
                    "type": "Number"
                },
                {
                    "name": "dLevel",
                    "description": "Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3364,
            "description": "Assign a parameter to be controlled by this envelope.\nIf a p5.Sound object is given, then the p5.Env will control its\noutput gain. If multiple inputs are provided, the env will\ncontrol all of them.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound object or\n                              Web Audio Param.",
                    "type": "Object"
                }
            ],
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3382,
            "description": "Play tells the envelope to start acting on a given input.\nIf the input is a p5.sound object (i.e. AudioIn, Oscillator,\nSoundFile), then Env will control its output volume.\nEnvelopes can also be used to control any <a href=\"\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\nWeb Audio Audio Param.</a>",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound object or\n                              Web Audio Param.",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time from now (in seconds)",
                    "type": "Number"
                }
            ],
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3417,
            "description": "Trigger the Attack, Decay, and Sustain of the Envelope.\nSimilar to holding down a key on a piano, but it will\nhold the sustain level until you let go. Input can be\nany p5.sound object, or a <a href=\"\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\nWeb Audio Param</a>.",
            "itemtype": "method",
            "name": "triggerAttack",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound Object or Web Audio Param",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time from now (in seconds)",
                    "type": "Number"
                }
            ],
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3452,
            "description": "Trigger the Release of the Envelope. This is similar to releasing\nthe key on a piano and letting the sound fade according to the\nrelease level and release time.",
            "itemtype": "method",
            "name": "triggerRelease",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound Object or Web Audio Param",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time to trigger the release",
                    "type": "Number"
                }
            ],
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3535,
            "description": "Add a value to the p5.Oscillator's output amplitude,\nand return the oscillator. Calling this method\nagain will override the initial add() with new values.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3551,
            "description": "Multiply the p5.Env's output amplitude\nby a fixed value. Calling this method\nagain will override the initial mult() with new values.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3567,
            "description": "Scale this envelope's amplitude values to a given\nrange, and return the envelope. Calling this method\nagain will override the initial scale() with new values.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3669,
            "description": "Set the width of a Pulse object (an oscillator that implements\nPulse Width Modulation).",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "width",
                    "description": "Width between the pulses (0 to 1.0,\n                       defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Pulse",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3846,
            "description": "Set type of noise to 'white', 'pink' or 'brown'.\nWhite is the default.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'white', 'pink' or 'brown'",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3876,
            "description": "Start the noise",
            "itemtype": "method",
            "name": "start",
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3893,
            "description": "Stop the noise.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3905,
            "description": "Pan the noise.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panning",
                    "description": "Number between -1 (left)\n                         and 1 (right)",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3914,
            "description": "Set the amplitude of the noise between 0 and 1.0. Or,\nmodulate amplitude with an audio signal such as an oscillator.",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0\n                                   or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3924,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3930,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Noise",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 3995,
            "description": "Client must allow browser to access their microphone / audioin source.\nDefault: false. Will become true when the client enables acces.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4016,
            "description": "Start processing audio input. This enables the use of other\nAudioIn methods like getLevel(). Note that by default, AudioIn\nis not connected to p5.sound's output. So you won't hear\nanything unless you use the connect() method.<br/>",
            "itemtype": "method",
            "name": "start",
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4059,
            "description": "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel().<br/>",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4069,
            "description": "Connect to an audio unit. If no parameter is provided, will\nconnect to the master output (i.e. your speakers).<br/>",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "An object that accepts audio input,\n                        such as an FFT",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4090,
            "description": "Disconnect the AudioIn from all audio units. For example, if\nconnect() had been called, disconnect() will stop sending \nsignal to your speakers.<br/>",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4102,
            "description": "Read the Amplitude (volume level) of an AudioIn. The AudioIn\nclass contains its own instance of the Amplitude class to help\nmake it easy to get a microphone's volume level. Accepts an\noptional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must\n.start() before using .getLevel().</em><br/>",
            "itemtype": "method",
            "name": "getLevel",
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smoothing is 0.0 by default.\n                             Smooths values based on previous values.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Volume level (between 0.0 and 1.0)",
                "type": "Number"
            },
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4120,
            "description": "Add input sources to the list of available sources.",
            "access": "private",
            "tagname": "",
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4134,
            "description": "Set amplitude (volume) of a mic input between 0 and 1.0. <br/>",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "vol",
                    "description": "between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "ramp time (optional)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4153,
            "description": "Returns a list of available input sources. Some browsers\ngive the client the option to set their own media source.\nOthers allow JavaScript to determine which source,\nand for this we have listSources() and setSource().<br/>",
            "itemtype": "method",
            "name": "listSources",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4171,
            "description": "Set the input source. Accepts a number representing a\nposition in the array returned by listSources().\nThis is only available in browsers that support \nMediaStreamTrack.getSources(). Instead, some browsers\ngive users the option to set their own media source.<br/>",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "num",
                    "description": "position of input source in the array",
                    "type": "Number"
                }
            ],
            "class": "p5.AudioIn",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4272,
            "description": "The p5.Filter is built with a\n<a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\">\nWeb Audio BiquadFilter Node</a>.",
            "itemtype": "property",
            "name": "biquadFilter",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4288,
            "description": "Filter an audio signal according to a set\nof filter parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "Signal",
                    "description": "An object that outputs audio",
                    "type": "Object"
                },
                {
                    "name": "freq",
                    "description": "Frequency in Hz, from 10 to 22050",
                    "type": "[Number]"
                },
                {
                    "name": "res",
                    "description": "Resonance/Width of the filter frequency\n                      from 0.001 to 1000",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4302,
            "description": "Set the frequency and the resonance of the filter.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "freq",
                    "description": "Frequency in Hz, from 10 to 22050",
                    "type": "Number"
                },
                {
                    "name": "res",
                    "description": "Resonance (Q) from 0.001 to 1000",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4319,
            "description": "Set the filter frequency, in Hz, from 10 to 22050 (the range of\nhuman hearing, although in reality most people hear in a narrower\nrange).",
            "itemtype": "method",
            "name": "freq",
            "params": [
                {
                    "name": "freq",
                    "description": "Filter Frequency",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "value  Returns the current frequency value",
                "type": "Number"
            },
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4345,
            "description": "Controls either width of a bandpass frequency,\nor the resonance of a low/highpass cutoff frequency.",
            "itemtype": "method",
            "name": "res",
            "params": [
                {
                    "name": "res",
                    "description": "Resonance/Width of filter freq\n                     from 0.001 to 1000",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "value Returns the current res value",
                "type": "Number"
            },
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4368,
            "description": "Set the type of a p5.Filter. Possible types include: \n\"lowpass\" (default), \"highpass\", \"bandpass\", \n\"lowshelf\", \"highshelf\", \"peaking\", \"notch\",\n\"allpass\".",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4380,
            "description": "Set the output level of the filter.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4398,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4408,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4416,
            "description": "Constructor: <code>new p5.LowPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('lowpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.LowPass",
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4428,
            "description": "Constructor: <code>new p5.HighPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('highpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.HighPass",
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4440,
            "description": "Constructor: <code>new p5.BandPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('bandpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.BandPass",
            "class": "p5.Filter",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4500,
            "description": "The p5.Delay is built with two\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\nWeb Audio Delay Nodes</a>, one for each stereo channel.",
            "itemtype": "property",
            "name": "leftDelay",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4509,
            "description": "The p5.Delay is built with two\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\nWeb Audio Delay Nodes</a>, one for each stereo channel.",
            "itemtype": "property",
            "name": "rightDelay",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4522,
            "description": "Internal filter. Set to lowPass by default, but can be accessed directly.\nSee p5.Filter for methods. Or use the p5.Delay.filter() method to change\nfrequency and q.",
            "itemtype": "property",
            "name": "lowPass",
            "type": "{p5.Filter}",
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4549,
            "description": "Add delay to an audio signal according to a set\nof delay parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "Signal",
                    "description": "An object that outputs audio",
                    "type": "Object"
                },
                {
                    "name": "delayTime",
                    "description": "Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "feedback",
                    "description": "sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "lowPass",
                    "description": "Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4584,
            "description": "Set the delay (echo) time, in seconds. Usually this value will be\na floating point number between 0.0 and 1.0.",
            "itemtype": "method",
            "name": "delayTime",
            "params": [
                {
                    "name": "delayTime",
                    "description": "Time (in seconds) of the delay",
                    "type": "Number"
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4603,
            "description": "Feedback occurs when Delay sends its signal back through its input\nin a loop. The feedback amount determines how much signal to send each\ntime through the loop. A feedback greater than 1.0 is not desirable because\nit will increase the overall output each time through the loop,\ncreating an infinite feedback loop.",
            "itemtype": "method",
            "name": "feedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param",
                    "type": "Number|Object"
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4627,
            "description": "Set a lowpass filter frequency for the delay. A lowpass filter\nwill cut off any frequencies higher than the filter frequency.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "cutoffFreq",
                    "description": "A lowpass filter will cut off any \n                            frequencies higher than the filter frequency.",
                    "type": "Number|Object"
                },
                {
                    "name": "res",
                    "description": "Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.",
                    "type": "Number|Object"
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4644,
            "description": "Choose a preset type of delay. 'pingPong' bounces the signal\nfrom the left to the right channel to produce a stereo effect.\nAny other parameter will revert to the default delay setting.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'pingPong' (1) or 'default' (0)",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4676,
            "description": "Set the output level of the delay effect.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4694,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4704,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Delay",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4763,
            "description": "Connect a source to the reverb, and assign reverb parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "src",
                    "description": "p5.sound / Web Audio object with a sound\n                         output.",
                    "type": "Object"
                },
                {
                    "name": "seconds",
                    "description": "Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.",
                    "type": "[Number]"
                },
                {
                    "name": "decayRate",
                    "description": "Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.",
                    "type": "[Number]"
                },
                {
                    "name": "reverse",
                    "description": "Play the reverb backwards or forwards.",
                    "type": "[Boolean]"
                }
            ],
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4792,
            "description": "Set the reverb settings. Similar to .process(), but without\nassigning a new input.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "seconds",
                    "description": "Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.",
                    "type": "[Number]"
                },
                {
                    "name": "decayRate",
                    "description": "Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.",
                    "type": "[Number]"
                },
                {
                    "name": "reverse",
                    "description": "Play the reverb backwards or forwards.",
                    "type": "[Boolean]"
                }
            ],
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4819,
            "description": "Set the output level of the delay effect.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4837,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4847,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4855,
            "description": "Inspired by Simple Reverb by Jordan Santell\nhttps://github.com/web-audio-components/simple-reverb/blob/master/index.js\n \nUtility function for building an impulse response\nbased on the module parameters.",
            "access": "private",
            "tagname": "",
            "class": "p5.Reverb",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4944,
            "description": "Internally, the p5.Convolver uses the a\n<a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\">\nWeb Audio Convolver Node</a>.",
            "itemtype": "property",
            "name": "convolverNode",
            "type": "{Object}  Web Audio Convolver Node",
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 4974,
            "description": "Create a p5.Convolver. Accepts a path to a soundfile \nthat will be used to generate an impulse response.",
            "itemtype": "method",
            "name": "createConvolver",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Convolver"
            },
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  // We have both MP3 and OGG versions of all sound assets\n  soundFormats('ogg', 'mp3');\n  \n  // Try replacing 'bx-spring' with other soundfiles like\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\n  cVerb = createConvolver('assets/bx-spring.mp3');\n\n  // Try replacing 'Damscray_DancingTiger' with\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5019,
            "description": "Private method to load a buffer as an Impulse Response,\nassign it to the convolverNode, and add to the Array of .impulses.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5051,
            "description": "Connect a source to the reverb, and assign reverb parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "src",
                    "description": "p5.sound / Web Audio object with a sound\n                         output.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  soundFormats('ogg', 'mp3');\n  \n  cVerb = createConvolver('assets/concrete-tunnel.mp3');\n\n  sound = loadSound('assets/beat.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with (i.e. connect to) cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5083,
            "description": "If you load multiple impulse files using the .addImpulse method,\nthey will be stored as Objects in this Array. Toggle between them\nwith the <code>toggleImpulse(id)</code> method.",
            "itemtype": "property",
            "name": "impulses",
            "type": "{Array} Array of Web Audio Buffers",
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5092,
            "description": "Load and assign a new Impulse Response to the p5.Convolver.\nThe impulse is added to the <code>.impulses</code> array. Previous\nimpulses can be accessed with the <code>.toggleImpulse(id)</code>\nmethod.",
            "itemtype": "method",
            "name": "addImpulse",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5109,
            "description": "Similar to .addImpulse, except that the <code>.impulses</code>\nArray is reset to save memory. A new <code>.impulses</code>\narray is created with this impulse as the only item.",
            "itemtype": "method",
            "name": "resetImpulse",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5126,
            "description": "If you have used <code>.addImpulse()</code> to add multiple impulses\nto a p5.Convolver, then you can use this method to toggle between\nthe items in the <code>.impulses</code> Array. Accepts a parameter\nto identify which impulse you wish to use, identified either by its\noriginal filename (String) or by its position in the <code>.impulses\n</code> Array (Number).<br/>\nYou can access the objects in the .impulses Array directly. Each\nObject has two attributes: an <code>.audioBuffer</code> (type:\nWeb Audio <a href=\"\nhttp://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\">\nAudioBuffer)</a> and a <code>.name</code>, a String that corresponds\nwith the original filename.",
            "itemtype": "method",
            "name": "toggleImpulse",
            "params": [
                {
                    "name": "id",
                    "description": "Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5175,
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5342,
            "description": "Set the global tempo, in beats per minute, for all\np5.Parts. This method will impact all active p5.Parts.",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Convolver",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5409,
            "description": "Array of values to pass into the callback\nat each step of the phrase. Depending on the callback\nfunction's requirements, these values may be numbers,\nstrings, or an object with multiple parameters.\nZero (0) indicates a rest.",
            "itemtype": "property",
            "name": "sequence",
            "type": "{Array}",
            "class": "p5.Phrase",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5482,
            "description": "Set the tempo of this part, in Beats Per Minute.",
            "itemtype": "method",
            "name": "setBPM",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5492,
            "description": "Returns the Beats Per Minute of this currently part.",
            "itemtype": "method",
            "name": "getBPM",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5501,
            "description": "Start playback of this part. It will play\nthrough all of its phrases at a speed\ndetermined by setBPM.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5517,
            "description": "Loop playback of this part. It will begin\nlooping through all of its phrases at a speed\ndetermined by setBPM.",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5534,
            "description": "Tell the part to stop looping.",
            "itemtype": "method",
            "name": "noLoop",
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5546,
            "description": "Stop the part and cue it to step 0.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5556,
            "description": "Pause the part. Playback will resume\nfrom the current step.",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5568,
            "description": "Add a p5.Phrase to this Part.",
            "itemtype": "method",
            "name": "addPhrase",
            "params": [
                {
                    "name": "phrase",
                    "description": "reference to a p5.Phrase",
                    "type": "p5.Phrase"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5589,
            "description": "Remove a phrase from this part, based on the name it was\ngiven when it was created.",
            "itemtype": "method",
            "name": "removePhrase",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5603,
            "description": "Get a phrase from this part, based on the name it was\ngiven when it was created. Now you can modify its array.",
            "itemtype": "method",
            "name": "getPhrase",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5617,
            "description": "Get a phrase from this part, based on the name it was\ngiven when it was created. Now you can modify its array.",
            "itemtype": "method",
            "name": "replaceSequence",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sequence",
                    "description": "Array of values to pass into the callback\n                          at each step of the phrase.",
                    "type": "Array"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5645,
            "description": "Fire a callback function at every step.",
            "itemtype": "method",
            "name": "onStep",
            "params": [
                {
                    "name": "callback",
                    "description": "The name of the callback\n                            you want to fire\n                            on every beat/tatum.",
                    "type": "Function"
                }
            ],
            "class": "p5.Part",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5729,
            "description": "Start playback of the score.",
            "itemtype": "method",
            "name": "start",
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5738,
            "description": "Stop playback of the score.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5748,
            "description": "Pause playback of the score.",
            "itemtype": "method",
            "name": "pause",
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5756,
            "description": "Loop playback of the score.",
            "itemtype": "method",
            "name": "loop",
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5765,
            "description": "Stop looping playback of the score. If it\nis currently playing, this will go into effect\nafter the current round of playback completes.",
            "itemtype": "method",
            "name": "noLoop",
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5787,
            "description": "Set the tempo for all parts in the score",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Score",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5893,
            "description": "callback invoked when the recording is over",
            "access": "private",
            "tagname": "",
            "type": "{function(Float32Array)}",
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5906,
            "description": "Connect a specific device to the p5.SoundRecorder.\nIf no parameter is given, p5.SoundRecorer will record\nall audible p5.sound from your sketch.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound object or a web audio unit\n                       that outputs sound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5927,
            "description": "Start recording. To access the recording, provide\na p5.SoundFile as the first parameter. The p5.SoundRecorder\nwill send its recording to that p5.SoundFile for playback once\nrecording is complete. Optional parameters include duration\n(in seconds) of the recording, and a callback function that\nwill be called once the complete recording has been\ntransfered to the p5.SoundFile.",
            "itemtype": "method",
            "name": "record",
            "params": [
                {
                    "name": "soundFile",
                    "description": "p5.SoundFile",
                    "type": "p5.SoundFile"
                },
                {
                    "name": "duration",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The name of a function that will be\n                              called once the recording completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5960,
            "description": "Stop the recording. Once the recording is stopped,\nthe results will be sent to the p5.SoundFile that\nwas given on .record(), and if a callback function\nwas provided on record, that function will be called.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 5979,
            "description": "internal method called on audio process",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "AudioProcessorEvent"
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "lib/addons/p5.sound.js",
            "line": 6030,
            "description": "Save a p5.SoundFile as a .wav audio file.",
            "itemtype": "method",
            "name": "saveSound",
            "params": [
                {
                    "name": "soundFile",
                    "description": "p5.SoundFile that you wish to save",
                    "type": "p5.SoundFile"
                },
                {
                    "name": "name",
                    "description": "name of the resulting .wav file.",
                    "type": "String"
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound",
            "submodule": "p5.sound"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {Invert}",
            "line": " src/image/filters.js:243"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " lib/addons/p5.sound.js:1254"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/addons/p5.sound.js:1254"
        },
        {
            "message": "param name missing: {String}",
            "line": " lib/addons/p5.sound.js:4368"
        },
        {
            "message": "Missing item type\nThis is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure and it can also\ntake an optional node parameter for attaching the generated p5 canvas\nto a node.  The sketch closure takes the newly created p5 instance as\nits sole argument and may optionally set preload(), setup(), and/or\ndraw() properties on it for running a sketch.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object",
            "line": " src/core/core.js:16"
        },
        {
            "message": "Missing item type\nReturns the current framerate.",
            "line": " src/environment/environment.js:137"
        },
        {
            "message": "Missing item type\nSpecifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second.\n\nCalling frameRate() with no arguments returns the current framerate.",
            "line": " src/environment/environment.js:146"
        },
        {
            "message": "Missing item type\nThis module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "line": " src/image/filters.js:5"
        },
        {
            "message": "Missing item type\nReturns the pixel buffer for a canvas",
            "line": " src/image/filters.js:31"
        },
        {
            "message": "Missing item type\nReturns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "line": " src/image/filters.js:54"
        },
        {
            "message": "Missing item type\nModifies pixels RGBA values to values contained in the data object.",
            "line": " src/image/filters.js:73"
        },
        {
            "message": "Missing item type\nReturns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "line": " src/image/filters.js:93"
        },
        {
            "message": "Missing item type\nReturns a blank ImageData object.",
            "line": " src/image/filters.js:116"
        },
        {
            "message": "Missing item type\nApplys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "line": " src/image/filters.js:132"
        },
        {
            "message": "Missing item type\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:171"
        },
        {
            "message": "Missing item type\nConverts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:206"
        },
        {
            "message": "Missing item type\nSets the alpha channel to entirely opaque. No parameter is used.",
            "line": " src/image/filters.js:228"
        },
        {
            "message": "Missing item type\nSets each pixel to its inverse value. No parameter is used.",
            "line": " src/image/filters.js:243"
        },
        {
            "message": "Missing item type\nLimits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "line": " src/image/filters.js:259"
        },
        {
            "message": "Missing item type\nreduces the bright areas in an image",
            "line": " src/image/filters.js:290"
        },
        {
            "message": "Missing item type\nincreases the bright areas in an image",
            "line": " src/image/filters.js:371"
        },
        {
            "message": "Missing item type\nThis module defines the p5 methods for the p5.Image class\nfor drawing images to the main display canvas.",
            "line": " src/image/image.js:9"
        },
        {
            "message": "Missing item type\nApply the current tint color to the input image, return the resulting\ncanvas.",
            "line": " src/image/loading_displaying.js:236"
        },
        {
            "message": "Missing item type\n_updatePAccelerations updates the pAcceleration values",
            "line": " src/input/acceleration.js:73"
        },
        {
            "message": "Missing item type\nHolds the key codes of currently pressed keys.",
            "line": " src/input/keyboard.js:13"
        },
        {
            "message": "Missing item type\nThe onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will no fire if the user is\nnot focused on the element we must assume all keys currently down have \nbeen released.",
            "line": " src/input/keyboard.js:243"
        },
        {
            "message": "Missing item type\nThese Regular Expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases\nthe legibility and comprehensibility of the code",
            "line": " src/objects/p5.Color.js:79"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format #XXX,\ne.g. #416",
            "line": " src/objects/p5.Color.js:247"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format #XXXXXX,\ne.g. #b4d455",
            "line": " src/objects/p5.Color.js:253"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format rgb(R, G, B),\ne.g. rgb(255, 0, 128)",
            "line": " src/objects/p5.Color.js:259"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format rgb(R%, G%, B%),\ne.g. rgb(100%, 0%, 28.9%)",
            "line": " src/objects/p5.Color.js:275"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format rgb(R, G, B, A),\ne.g. rgb(255, 0, 128, 0.25)",
            "line": " src/objects/p5.Color.js:291"
        },
        {
            "message": "Missing item type\nRegular expression for matching colors in format rgb(R%, G%, B%, A),\ne.g. rgb(100%, 0%, 28.9%. 0.5)",
            "line": " src/objects/p5.Color.js:307"
        },
        {
            "message": "Missing item type\nFor a number of different inputs, returns a color formatted as\n[r, g, b, a].",
            "line": " src/objects/p5.Color.js:324"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " src/objects/p5.Element.js:494"
        },
        {
            "message": "Missing item type\nThis module defines the p5.Image class and P5 methods for\ndrawing images to the main display canvas.",
            "line": " src/objects/p5.Image.js:10"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " src/objects/p5.Image.js:110"
        },
        {
            "message": "Missing item type\nTable Options\n<p>Generic class for handling tabular data, typically from a\nCSV, TSV, or other sort of spreadsheet file.</p>\n<p>CSV files are\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\ncomma separated values</a>, often with the data in quotes. TSV\nfiles use tabs as separators, and usually don't bother with the\nquotes.</p>\n<p>File names should end with .csv if they're comma separated.</p>\n<p>A rough \"spec\" for CSV can be found\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\n<p>To load files, use the loadTable method.</p>\n\nPossible options include:\n<ul>\n<li>csv - parse the table as comma-separated values\n<li>tsv - parse the table as tab-separated values\n<li>header - this table has a header (title) row\n</ul>",
            "line": " src/objects/p5.Table.js:13"
        },
        {
            "message": "Missing item type\nReturns the total number of columns in a Table.",
            "line": " src/objects/p5.Table.js:300"
        },
        {
            "message": "Missing item type\nAdds two vectors together and returns a new one.",
            "line": " src/objects/p5.Vector.js:690"
        },
        {
            "message": "Missing item type\nSubtracts one p5.Vector from another and returns a new one.  The second\nvector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "line": " src/objects/p5.Vector.js:710"
        },
        {
            "message": "Missing item type\nMultiplies a vector by a scalar and returns a new vector.",
            "line": " src/objects/p5.Vector.js:732"
        },
        {
            "message": "Missing item type\nDivides a vector by a scalar and returns a new vector.",
            "line": " src/objects/p5.Vector.js:751"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " src/objects/p5.Vector.js:771"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " src/objects/p5.Vector.js:783"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "line": " src/objects/p5.Vector.js:795"
        },
        {
            "message": "Missing item type\nLinear interpolate a vector to another vector and return the result as a\nnew vector.",
            "line": " src/objects/p5.Vector.js:808"
        },
        {
            "message": "Missing item type\nWrites the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "line": " src/output/files.js:219"
        },
        {
            "message": "Missing item type\nWrites an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "line": " src/output/files.js:274"
        },
        {
            "message": "Missing item type\nWrites the contents of a Table object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "line": " src/output/files.js:325"
        },
        {
            "message": "Missing item type\nGenerate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by saveStrings, saveJSON, saveTable etc.",
            "line": " src/output/files.js:453"
        },
        {
            "message": "Missing item type\nForces download. Accepts a url to filedata/blob, a filename,\nand an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by saveStrings, saveJSON, saveTable etc.",
            "line": " src/output/files.js:474"
        },
        {
            "message": "Missing item type\nReturns a file extension, or another string\nif the provided parameter has no extension.",
            "line": " src/output/files.js:510"
        },
        {
            "message": "Missing item type\nReturns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "line": " src/output/files.js:542"
        },
        {
            "message": "Missing item type\nHelper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "line": " src/output/files.js:554"
        },
        {
            "message": "Missing item type\nSave the current canvas as an image. In Safari, will open the\nimage in the window and the user must provide their own\nfilename on save-as. Other browsers will either save the\nfile immediately, or prompt the user with a dialogue window.",
            "line": " src/output/image.js:8"
        },
        {
            "message": "Missing item type\nCapture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will attempt to download\nall of the images that have just been created.",
            "line": " src/output/image.js:70"
        },
        {
            "message": "Missing item type\nReturn a array of objects that represent bezier curves which approximate \nthe circular arc centered at the origin, from startAngle to endAngle \n(radians) with the specified radius.\n\nEach bezier curve is an object with four points, where x1,y1 and\nx4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's\ncontrol points.",
            "line": " src/shape/2d_primitives.js:23"
        },
        {
            "message": "Missing item type\nCubic bezier approximation of a circular arc centered at the origin,\nfrom (radians) a1 to a2, where a2-a1 < pi/2.  The arc's radius is r.\n\nReturns an object with four points, where x1,y1 and x4,y4 are the arc's \nend points and x2,y2 and x3,y3 are the cubic bezier's control points.\n\nThis algorithm is based on the approach described in:\nA. Riškus, \"Approximation of a Cubic Bezier Curve by Circular Arcs and \nVice Versa,\" Information Technology and Control, 35(4), 2006 pp. 371-378.",
            "line": " src/shape/2d_primitives.js:51"
        },
        {
            "message": "Missing item type\nSets the resolution at which Beziers display.\n\nThe default value is 20.",
            "line": " src/shape/curves.js:58"
        },
        {
            "message": "Missing item type\nSets the resolution at which curves display.\n\nThe default value is 20.",
            "line": " src/shape/curves.js:238"
        },
        {
            "message": "Missing item type\nReturns ascent of the current font at its current size.",
            "line": " src/typography/attributes.js:166"
        },
        {
            "message": "Missing item type\nReturns descent of the current font at its current size.",
            "line": " src/typography/attributes.js:191"
        },
        {
            "message": "Missing item type\nHelper fxn to apply text properties.",
            "line": " src/typography/attributes.js:216"
        },
        {
            "message": "Missing item type\nHelper fxn to measure ascent and descent. \nAdapted from http://stackoverflow.com/a/25355178",
            "line": " src/typography/attributes.js:227"
        },
        {
            "message": "Missing item type\nHelper fxn to measure ascent and descent. \nAdapted from http://stackoverflow.com/a/25355178",
            "line": " src/typography/attributes.js:268"
        },
        {
            "message": "Missing item type\nmodule Utils\nsubmodule Color Utils",
            "line": " src/utils/color_utils.js:1"
        },
        {
            "message": "Missing item type\nFor a color expressed as an HSBA array, return the corresponding RGBA value",
            "line": " src/utils/color_utils.js:11"
        },
        {
            "message": "Missing item type\nFor a color expressed as an RGBA array, return the corresponding HSBA value",
            "line": " src/utils/color_utils.js:79"
        },
        {
            "message": "Missing item type",
            "line": " src/var/canvas.js:1"
        },
        {
            "message": "Missing item type\n_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "line": " src/app.js:52"
        },
        {
            "message": "Missing item type\nHelper function for getElement and getElements.",
            "line": " lib/addons/p5.dom.js:79"
        },
        {
            "message": "Missing item type\nHelpers for create methods.",
            "line": " lib/addons/p5.dom.js:116"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:214"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:343"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:398"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:426"
        },
        {
            "message": "Missing item type\np5.sound developed by Jason Sigal for the Processing Foundation, Google Summer of Code 2014. The MIT License (MIT).\n\nhttp://github.com/therewasaguy/p5.sound\n\nSome of the many audio libraries & resources that inspire p5.sound:\n - TONE.js (c) Yotam Mann, 2014. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\n - buzz.js (c) Jay Salvat, 2013. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\n \n Web Audio API: http://w3.org/TR/webaudio/",
            "line": " lib/addons/p5.sound.js:53"
        },
        {
            "message": "Missing item type\nWeb Audio SHIMS and helper functions to ensure compatability across browsers",
            "line": " lib/addons/p5.sound.js:71"
        },
        {
            "message": "Missing item type\nDetermine which filetypes are supported (inspired by buzz.js)\nThe audio element (el) will only be used to test browser support for various audio formats",
            "line": " lib/addons/p5.sound.js:114"
        },
        {
            "message": "Missing item type\nMaster contains AudioContext and the master sound output.",
            "line": " lib/addons/p5.sound.js:172"
        },
        {
            "message": "Missing item type\na silent connection to the DesinationNode\nwhich will ensure that anything connected to it\nwill not be garbage collected",
            "line": " lib/addons/p5.sound.js:215"
        },
        {
            "message": "Missing item type\nReturns the closest MIDI note value for\na given frequency.",
            "line": " lib/addons/p5.sound.js:272"
        },
        {
            "message": "Missing item type\nUsed by Osc and Env to chain signal math",
            "line": " lib/addons/p5.sound.js:432"
        },
        {
            "message": "Missing item type\nThis is a helper function that the p5.SoundFile calls to load\nitself. Accepts a callback (the name of another function)\nas an optional parameter.",
            "line": " lib/addons/p5.sound.js:652"
        },
        {
            "message": "Missing item type\nSet a p5.SoundFile's looping flag to true or false. If the sound\nis currently playing, this change will take effect when it\nreaches the end of the current playback.",
            "line": " lib/addons/p5.sound.js:914"
        },
        {
            "message": "Missing item type\nReturns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.",
            "line": " lib/addons/p5.sound.js:934"
        },
        {
            "message": "Missing item type\nStop playback on all of this soundfile's sources.",
            "line": " lib/addons/p5.sound.js:991"
        },
        {
            "message": "Missing item type\nReturns the current stereo pan position (-1.0 to 1.0)",
            "line": " lib/addons/p5.sound.js:1089"
        },
        {
            "message": "Missing item type\nReplace the current Audio Buffer with a new Buffer.",
            "line": " lib/addons/p5.sound.js:1432"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2063"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2350"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2370"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2418"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2544"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2575"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:2596"
        },
        {
            "message": "Missing item type\nConnect a p5.sound object or Web Audio node to this\np5.Signal so that its amplitude values can be scaled.",
            "line": " lib/addons/p5.sound.js:2698"
        },
        {
            "message": "Missing item type\nSet the amplitude of the noise between 0 and 1.0. Or,\nmodulate amplitude with an audio signal such as an oscillator.",
            "line": " lib/addons/p5.sound.js:3914"
        },
        {
            "message": "Missing item type\nAdd input sources to the list of available sources.",
            "line": " lib/addons/p5.sound.js:4120"
        },
        {
            "message": "Missing item type\nInspired by Simple Reverb by Jordan Santell\nhttps://github.com/web-audio-components/simple-reverb/blob/master/index.js\n \nUtility function for building an impulse response\nbased on the module parameters.",
            "line": " lib/addons/p5.sound.js:4855"
        },
        {
            "message": "Missing item type\nPrivate method to load a buffer as an Impulse Response,\nassign it to the convolverNode, and add to the Array of .impulses.",
            "line": " lib/addons/p5.sound.js:5019"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.sound.js:5175"
        },
        {
            "message": "Missing item type\nSet the global tempo, in beats per minute, for all\np5.Parts. This method will impact all active p5.Parts.",
            "line": " lib/addons/p5.sound.js:5342"
        },
        {
            "message": "Missing item type\nSet the tempo for all parts in the score",
            "line": " lib/addons/p5.sound.js:5787"
        },
        {
            "message": "Missing item type\ncallback invoked when the recording is over",
            "line": " lib/addons/p5.sound.js:5893"
        },
        {
            "message": "Missing item type\ninternal method called on audio process",
            "line": " lib/addons/p5.sound.js:5979"
        }
    ]
}